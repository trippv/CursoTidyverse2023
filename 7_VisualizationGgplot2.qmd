---
title: "Visualización con ggplot2; Edición"
author: "Miguel A. Tripp Valdez"
editor_options: 
  chunk_output_type: console
---


::: callout-objetivos
## Objetivos

Al final de esta lección serás capaz de:

*   Modificar aspectos visuales como color, forma, transparencia, etc.
*   Generar paneles para dividir subconjuntos de datos.
*   Modificar el tema general de una gráfica.
*   Modificar etiquetas y leyendas.
*   Exportar una gráfica en distintos formatos.

:::


# Colores, formas y tamaños; mas sobre aes()

En la sección anterior ya habíamos mencionado como el formato de los _geoms_ nos permite distinguir grupos, clases o estructuras de datos:

```{r aes_demo}
#| echo: false
#| warning: false
#| message: false
#| label: fig-aes 
#| fig-cap: "Los Aesthetics nos permiten representar diferentes variables en un solo gráfico"
#| fig-subcap: 
#|   - "Color"
#|   - "Forma"
#|   - "Transparencia"
#|   - "Tamaño"
#|   - "Relleno"
#|   - "Agrupamiento"
#| layout-ncol: 2


library(tidyverse)


penguis <- read_csv("data/palmer_penguins.csv") |> 
  na.omit()

pp <- ggplot(data = penguis, aes(x = bill_length_mm, y = body_mass_g))+
  theme_bw()

# color
pp + 
  geom_point(aes(color = species)) +
  labs(title = "Color", 
       subtitle = "color = species",
       x = "Longitud del pico (mm)",
       y = "Masa corporal (g)",
       color = "Especie")

# shape
pp + 
  geom_point(aes(shape = species)) +
  labs(title = "Forma", 
       subtitle = "shape = species",
       x = "Longitud del pico (mm)",
       y = "Masa corporal (g)",
       shape = "Especie")

# transparencia
pp + 
  geom_point(aes(alpha = body_mass_g)) +
  labs(title = "Transarencia", 
       subtitle = "alpha = body_mass_g",
       x = "Longitud del pico (mm)",
       y = "Masa corporal (g)",
       alpha = "Especie")

# tamaño
pp + 
  geom_point(aes(size = body_mass_g)) +
  labs(title = "Tamaño", 
       subtitle = "size = body_mass_g",
       x = "Longitud del pico (mm)",
       y = "Masa corporal (g)",
       size = "Especie")

# relleno
ggplot(penguis, aes(x = bill_length_mm, fill = species))+
  geom_density(alpha = 0.4)+
  theme_bw()+
  labs(title = "Relleno",
       subtitle = "fill = species",
       x = "Longitud del pico (mm)",
       y = "Densidad",
       fill = "Especie")

# grouping
CO2 |> 
  ggplot(aes(x = conc, y = uptake, group = Plant, color = Type))+
  geom_line()+
  geom_point()+
  theme_bw()+
  labs(title = "Agrupamiento",
       subtitle = "group = Plant",
       x = "Concentración de CO2 (mL/L)",
       y = "Absorción de CO2 mmol/m2 s)",
       color = "Tipo")

```

# Ajuste manual de color

## Ajuste manual global

Dentro de los aes podemos asignar un color diferente a cada grupo, pero también es posible asignar un color arbitrario a todas los geoms. Para esto, tenemos que establecer el color **afuera del *aes()***.

por ejemplo

```{r}
#| message: false
#| warning: false
library(tidyverse)

#abrir la base de datos de pingüinos
penguins <- read_csv("data/palmer_penguins.csv") |> 
  na.omit()
```

```{r}
#| message: false
#| warning: false
ggplot(data = penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g), 
             color = "darkblue")
```

De la misma manera, podemos ajustar la transparencia (*alpha*) o la forma (*shape*) para todos los puntos u otro geom al establecer este parámetro afuera del `aes()`

```{r}
#| message: false
#| warning: false
ggplot(data = penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g), 
             shape = 15)
```

::: callout-note
# Estilos de puntos disponibles

A continuación se muestran los tipos de figuras disponibles para gráficos de puntos (p. ej. `geom_point()`. Para modificar el punto se usa el parámetro `shape = nn`)

```{r}
#| message: false
#| warning: false
#| echo: false
#| fig-align: center
#| 
ggpubr::show_point_shapes()+
  theme_void()+
  labs(title = " ")
```

> Nota que los puntos del 21 al 25 son simbolos abiertos por lo que pueden ser rellenados por un color (*fill*).
:::

## Ajuste manual por grupo

En ejemplos anteriores, donde usamos el argumento `color` dentro de los `aes()` ggplot2 asigna una paleta de colores default. Si queremos asignar colores específicos, podemos añadirlos manualmente usando las funciones:

-   `scale_color_manual()`
-   `scale_fill_manual()`

```{r}
pp <- ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species))

# ajustamos el color con scale_color_manual()
pp +
  scale_color_manual(values = c("grey55", "orange", "lightblue"))

```

::: column-margin
::: callout-tip
Dado que se requiere un vector con los colores que se deseen utilizar, es posible hacer un objeto con un vector de colores y utilizarlo de forma recurrente en distintas figuras. Por ejemplo

```{r}
#| eval: false

# crear un vector con colores
colores <- c("grey55", "orange", "lightblue")

# incluir el vector dentra de la función
pp +
  scale_color_manual(values = colores)
```
:::
:::

## Ajuste manual de gradientes

También es posible hacer ajuste manual de gradientes de color utilizando la función `scale_color_gradient()`

Por ejemplo, podemos gráficar la relación entre la longitud del pico y el peso corporal, con un gradiente de color por el peso corporal

```{r}
pp2 <- ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, 
                 color = body_mass_g))
pp2

# ajustar manualmente el gradiente
pp2 +
  scale_color_gradient(low = "blue", high = "red")

```

## Seleccionar una nueva paleta de colores

Escoger los colores adecuados para una figura es mas complejo de lo que pudiera parecer y hay varios aspectos que se deben considerar. Puedes encontrar algunas recomendaciones [aquí](https://clauswilke.com/dataviz/color-basics.html).

Afortunadamente, es posible encontrar diversas paletas prediseñadas, ya sea para datos categóricos, divergentes o secuenciales. Entre las mas comunes están los paquetes:

-   `RColorBrewer`
-   `Viridis`

### RColorBrewer

```{r}
#| fig-align: center
#| fig-cap: "Paleta de colores de RColorBrewer"
#| fig-width: 12
#| fig-height: 12
#| echo: false
library(RColorBrewer)
display.brewer.all()
```

### viridis

![](img/viridis_col_pal.png)

Hay varias opciones de como usar estas paletas de colores:

1.  Generar un vector con los colores de una paleta en especifico. Esto es mas útil para variables discretas

```{r}
#| warning: false
#| message: false
#| 
library(RColorBrewer)
library(viridis)

paleta_brewer <- brewer.pal(name = "Dark2", n = 3)
paleta_virids <- viridis(n = 3)

# usar paleta de RColorBrewer
pp +
  scale_color_manual(values = paleta_brewer)

# Usar paletta de Viridis
pp + 
  scale_color_manual(values = paleta_virids)
```

2.  Utilizar alguna de las funciones de cada paquete dentro de la figura. Por ejemplo `scale_color_brewer()` o `scale_color_viridids()`

```{r}
# usar RColorBrewer
pp +
  scale_color_brewer(palette = "Dark2")

# usar Viridis
pp +
  scale_color_viridis(discrete = TRUE,option = "viridis")

```

Para gradientes

```{r}
pp2 +
  scale_color_distiller(palette = 5)


pp2 +
  scale_colour_viridis_c(option = "magma")
```

::: column-margin
::: callout-tip
# ¿Quieres mas colores?

Existen numerosas opciones en línea para escoger colores y paletas de colores. Una herramienta básica es el [Selector de color de Google](https://g.co/kgs/gaCNNmg) que te permite generar el código HEX de un color en específico, o la herramienta [R Color Palettes](https://emilhvitfeldt.github.io/r-color-palettes/) que te permite generar un vector con una paleta de colores.
:::
:::

::: {.callout-caution icon="false"}
# Ejercicio: Colores y formas

::: column-margin
![](img/legendary_pokemon.jpeg){fig-align="center" width="350"}
:::

Abre la tabla de `pokemon` que se encuentra en la carpeta de `data` y genera:

1.  Un gráfico de dispersión de los valores de ataque (*attack*) y defensa (*defense*) cambiando el color y la forma de acuerdo a si es legendario o no. Elige los colores y formas que gustes.

2.  Calcula el promedio de porcentaje de machos (*percentage_male*) por tipo de pokemon (*type1*) y genera una gráfica de barras con los valores promedio y con el colores de las barras en función del valor promedio. Cambia la paleta de colores a una de tu preferencia

```{r}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: false

pokemon <- read_csv("data/pokemon.csv")

# Ejercicio e1
pokemon %>% 
  janitor::clean_names() %>% 
  mutate(generation = factor(generation)) %>% 
  mutate(is_legendary = factor(is_legendary)) %>% 
  ggplot(aes(x = attack, y = defense, 
             color = is_legendary, 
             shape = is_legendary)) +
  geom_point()+
  geom_smooth(method = "lm")+
  scale_color_brewer(palette = "Set1") +
  scale_shape_manual(values = c(1,15))


# Ejercicio e2
pokemon %>% 
  group_by(type1) %>% 
  summarise(mean_male_pct = mean(percentage_male, na.rm = TRUE)) %>% 
  ggplot(aes(x = type1, y = mean_male_pct, fill = mean_male_pct))+
  geom_col()+
  scale_fill_viridis_c()
```
:::

# Multiples paneles; `facet_wrap()`y `facet_grid()`

Una técnica muy eficiente para mostrar variables categóricas adicionales es generando gráficos de paneles, tambien llamados gráficos de Trellis o facetas. El facetado crea paneles de gráficos dividiendo los datos en subconjuntos y mostrando el mismotipo gráfico para cada subconjunto.

Hay dos tipos de facetado: en "cuadrícula" (*grid*) y "envuelto" (*wrap*). Ambas funciones son útiles cuando se desea organizar los gráficos con mas muchas variables. Aunque el resultado es similar, las diferencias entre ambas se ve reflejada en la siguiente figura:

![Diagrama ilustrando las diferencias entre \`facet_grid()\` (izq) y \`facet_wrap()\`(der)](img/position-facets.png){fig-align="center"}

Para generar los paneles en un gráfico, simplemente agregas una especificación de facetado con el nombre de una variable precedido por `\~`.

Para ver las diferencias entre ambos tipos de facetado, seguiremos utilizando la base de datos de `penguins`.

## `facet_wrap()`

`facet_wrap()` genera un listón de paneles de una variable determinada y las *envuelve* en un orden bidimensional. Es útil cuando se tiene una sola variable con varios niveles.

Vamos a utilizar nuestro objeto `pp`que generamos mas arriba y vamos a separar los registros de los pingüinos por sexo:

```{r}
ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + 
  facet_wrap(~ sex)
```

o por isla

```{r}
ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + 
  facet_wrap(~ island)
```

Podemos controlar la orientación de los paneles con `ncol` y `nrow`

```{r}
ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  facet_wrap(~ island, ncol = 1)
```

## `facet_grid()`

`facet_grid()` despliega el gráfico en una gradilla de dos dimensiones definido por la formula `x ~ y`, en donde `x` se despliega en columnas y `y` en las filas. Usualmente se recomienda colocar la variable con el mayor número de niveles en las columnas, aunque esto dependerá del área de trazado.

Por ejemplo, usando la base de datos de `penguins` vamos a graficar la relación de longitud de pico y peso corporal por sexo y por isla.

```{r}
ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
  facet_grid(sex ~ island)
```

## Ajustar las escalas

Tanto para `facet_wrap()` como `facet_grid()`es posible ajustar las escalas en los ejes de manera que sea el mismo para todos los paneles (*fixed*) o que pueda variar entre los paneles (*free*) utilizando los parámetros:

-   `scales= "fixed"`: Las escalas en el eje `x` y `y` esta fijas en todos los paneles.
-   `scales = "free_x"`: La escala en el eje `x` es variable y fija en el eje `y`.
-   `scales = "free_y"`: La escala en el eje `y` es variable y fija en el eje `x`.
-   `scales = "free"`: Las escalas de ambos ejes son variables

```{r}
ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + 
  facet_wrap(~ island, scales = "free_y")
```

```{r}
ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + 
  facet_wrap(~ island, scale = "free_x")

```

```{r}
ggplot(penguins)+
  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + 
  facet_wrap(~ island, scales = "free")
```

::: column-margin
::: callout-tip
Las escalas fijas facilitan visualizar patrones entre los paneles; las escalas variables facilitan ver patrones dentro de cada panel
:::
:::

::: {.callout-caution icon="false"}
# Desafio paneles

::: column-margin
![](img/penguin_size.jpeg){fig-align="center" width="350"}
:::

Recrea la siguiente figura:

```{r}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: true

penguins_noisland <- penguins %>% 
  select(-island)

ggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g))+
  geom_point(data = penguins_noisland, color = "grey75")+
  geom_point(aes(color = island))+
  facet_wrap(~island) 



```

-   *Tip1*: Tienes que utilizar dos `geom_points()`; una con la base de datos original y una transformada.
-   *Tip2*: Presta atención en donde pones el parámetro `color` para cada geom.
:::

# Themes

Dentro de ggplot, el sistema de `theme()` permite tener un control mas fino sobre los elementos visuales ajenos a los datos. Esto significa que el `theme()` no afecta como los datos son renderizados por los geoms, o como son transformados por las escalas, pero ayudan a mejorar la estética o ajustar el gráfico los requerimientos de la revista o sitio donde será publicado.

## Themes prediseñados

ggplot2 viene con diversos temas (*themes*) prediseñados con diferencias en cuanto a los colores de fondo, el uso de retícula, borde exterior, etc.

Para usar cualquiera de estos temas en nuestras gráfica simplemente agregamos la capa `+ theme_xx()`.

Algunas de las opciones son las siguientes:

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-theme 
#| fig-cap: "Algunos ejemplos de los diferentes themes prediseñados"
#| fig-subcap: 
#|   - "grey"
#|   - "classic"
#|   - "bw"
#|   - "light"
#|   - "minimal"
#|   - "void"
#| layout-ncol: 2


pp +
  theme_grey()+
  labs(title = "theme_grey")

pp + 
  theme_classic()+
  labs(title = "theme_classic()")

pp +
  theme_bw()+
  labs(title = "theme_bw()")

pp + 
  theme_light()+
  labs(title = "theme_light")

pp +
  theme_minimal()+
  labs(title = "theme_minimal()")

pp + 
  theme_void()+
  labs(title = "theme_void")



```

## Modificar componentes del tema

Si quieres modificar un componente del tema, puedes usar la función `theme()` con una estructura como se muestra:

`plot + theme(element.name = element.function())`

Este cambio puntual de un elemento anulará los ajustes preestablecido en algunos de los themes que vimos anteriormente.

Por ejemplo, si queremos utilizar un `theme_minimal()` pero quieres eliminar los *grids* secundarios, podemos utilizar el siguiente codigo:

```{r}
pp + 
  theme_minimal()+
  theme(panel.grid.minor = element_blank())
```

O si queremos cambiar la posición de la legenda, podemos utilizar el parametro `legend_position=`

```{r}
pp +
  theme_minimal()+
  theme(panel.grid.minor = element_blank(),
        legend.position = "top")
```

Hay cuatro tipos básicos de funciones de elementos incorporados: texto, líneas, rectángulos y en blanco (*blank*). Cada función de elemento tiene un conjunto de parámetros que controlan la apariencia:

-   `element_text()` controla el tamaño, color, tipo de fuente y posición de los elementos de texto, como titulos, ejes, leyendas, etc.

```{r}
pp + 
  theme(axis.title = element_text(size = 16, color = "red"))
```

-   `element_line()` controla el estilo y tamaño de las líneas dentro del área de trazado

```{r}
pp +
  theme(panel.grid = element_line(linetype = "dashed", color = "red"))
```

-   \|`element_rect()`dibuja y controla el estilo de rectángulos, principalmente para colores de fondo.

```{r}
pp +
  theme(panel.background = element_rect(fill = "lightblue", color = "red"))
```

-   `element_blank()`dibuja nada! Sin embargo, es un elemento que se utiliza muy a menudo para suprimir algún elemento no deseado, como por ejemplo los grids o marcas del eje.

```{r}
pp +
  theme(panel.grid.minor = element_blank())
```

Otro elemento importante es el control de la posición de la leyenda. Por default, ggplot2 coloca la leyenda a la derecha del gráfico, pero podemos ajustar la posición con el parámetro `legend.position = nn` donde podemos usar los argumentos `"left"`, `"right"`, `"top"`, `"bottom"` y `"none"`.

```{r}
#| layout-ncol: 2

pp +
  theme(legend.position = "top")


pp + 
  theme(legend.position = "none")
```

Realmente existen muchos elementos que podemos controlar dentro de la función `theme()` que nos llevaria todo el día revisarlo, pero con los argumentos que vimos anteriormente puedes hacer los principales ajustes de desees. En la siguiente imagen se muestran los principales elementos que puedes modificar:

![Eleméntos gráficos que se pueden modificar dentro de la función `theme()`](img/theme_cheatsheet.jpeg){fig-align="center"}

# Control de etiquetas (`labs()`)

Otro aspecto básico que podemos controlar en nuestros gráficos son las etiquetas, titulos y subtitulos. Todos estos los podemos ajustar utilizando la función `labs()`

Dentro de `labs()` podemos modificar el titulo del gráfico (`title`), subtitulo (`subtitle`), los títulos del eje `x`y `y`, así como los titulos que aparecen en la leyenda de cada uno de nuestros geoms, como `col`, `fill`, `size`, `alpha` y finalmente se puede agregar un `caption`

```{r}
pp +
  labs(x = "Longitud del pico (mm)",
       y = "Masa corporal (g)",
       color = "Especie",
       title = "Relación entre la longitud del pico y masa corporal",
       subtitle = "Especies Adelie, Chinstrap y Gentoo",
       caption = "Datos: Palmer Penguins")
```

::: {.callout-caution icon="false"}
# Desafio: gráficame como a una de tus chicas francesas

::: column-margin
![](img/r_titanic.jpeg){fig-align="center" width="350"}
:::

-   Abre la base de datos de `titanic.csv` que se encuentra en la carpeta `data`.

-   Usando lo que haz aprendido con Dplyr, calcula el número de personas que sobrevivieron o murieron `Survived` por sexo `Sex`y la clase `Pclass`.

-   Haz una gráfica de barras donde muestres el número de personas que vivieron o murieron por sexo y por clase. Puedes jugar con `facet_wrap()` así como los parámetros dentro de `geom_col()`, como `position = "dodge"` o `position = "fill"` hasta que encuentres la forma que consideres mas eficiente para mostrar a quien le fue peor en el hundimiento del Titanic

-   Ajusta los colores y etiquetas a tu gusto usando los parámetros que vimos anteriormente

```{r}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: false

titanic <- read_csv("data/titanic.csv")


titanic |> 
  group_by(Survived, Sex, Pclass) |> 
  mutate(Survived = factor(Survived)) |> 
  count() |> 
  ggplot(aes(x = Sex, y = n, fill = Survived))+
  geom_col(position= "fill")+
  facet_wrap(~Pclass, ncol = 3)+
  scale_fill_brewer(palette = 14)+
  theme_classic()+
  labs(title = "Proporción de supervivencia por clase y sexo",
       x = "Sexo", y = "Proporción",
       fill = "Supervivencia")

```

-   *Tip*: La variable `Survived` tiene valores de 0 (no sobrevivió) y 1 (sobrevivió). ¿Que pasa si tratas de ajustar los colores de esta variable si no se transforma antes?
:::

# Exportar un gráfico; `ggsave()`

Antes de guardar nuestro gráfico, revisemos un poco de teoría:

Cuando exportas un gráfico para utilizarlo en otro programa, tienes dos opciones principales de formato: raster o vector.

Los gráficos vectoriales describen el gráfico como una secuencia de operaciones, por ejemplo: dibuja una línea desde $(x_1,y_1)$ a $(x_2,y_2)$, dibuja un circulo en $(x_3,x_4)$ con radio $r$. Esto significa que pueden ser acercables "*infinitamente*" sin perder detalle. Los formatos mas comunes de gráficos vectoriales son `pdf`y `svg`.

Por otro lado, los gráficos rasterizados se almacenan como una matriz de colores de píxeles y tienen un tamaño de visualización óptimo fijo. El formato de gráfico rasterizado más útil es `png`.

La siguiente figura ilustra las principales diferencias entre ambos formatos.

![Diferencia entre un gráfico rasterizado (izq) y vectorial (der). Imagen tomada de https://ggplot2-book.org/](img/vector-raster.png)

Existen dos métodos para salvar un objetvo ggplot2. Puedes utilizar la aproximación estandar de R, donde se abre un dispositivo gráfico (*graphic device*), generar el gráfico y posteriormente cerrar el dispositivo:

```{r}
#| echo: true
#| eval: false
#| 
pdf("resultados/figuras/ggplot.pdf", width = 6, height = 6)
pp 
dev.off()
```

Alternativamente, ggplot proporciona una opción mas corta con `ggsave()`

```{r}
#| echo: true
#| eval: false

ggsave(plot = pp, filename = "resultados/figuras/ggplot.pdf")
```

::: column-margin
::: callout-tip
Si no especificas un objeto en el parámetro `plot`, en automático `ggsave()` tomara el último objeto ggplot2 que se haya generado.
:::
:::
