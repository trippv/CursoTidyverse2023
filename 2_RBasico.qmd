---
title: "R y Rstudio: Comandos Basicos"
author: "Miguel Tripp"
---

::: callout-objetivos
### 🎓Objetivos

Esta sección esta dirigida a personas con poca o nula experiencia en el uso de R y Rstudio. Al final de esta lección serás capaz de:

-   Reconocer los distintos elementos de Rstudio
-   Interactuar con la consola de R desde Rstudio
-   Realizar operaciones básicas en la consola
-   Reonocer las principales tipos de objetos y operaciones en R
:::

## Introducción

R es un lenguaje de programación y un entorno de software libre dedicado principalmente al análisis estadístico y la visualización de datos. Desarrollado inicialmente por los laboratorios de AT&T a partir de otro lenguaje de programación.

Entre las características que han hecho de R un lenguaje muy popular entre la comunidad científica y académica (ademas de que es gratuito 😉 ) es su capacidad para manejar y analizar grandes conjuntos de datos, junto con una vasta colección de paquetes desarrollados por la comunidad, lo hace altamente versátil y poderoso.

------------------------------------------------------------------------

## R y Rstudio

Si eres nuevo en el uso de R o algún otro lenguaje de programación es importante que distingas entre el lenguaje (que puede ser R, Python, Julia, etc) y la forma en que interactuamos con el. Es decir, R es como el motor de un vehículo, mientras que programas como Rstudio son el tablero que nos permiten manejar ese motor.

::::: columns
::: {.column width="50%"}
![](img/engine.jpg){fig-align="center" width="338"}
:::

::: {.column width="50%"}
![](img/car.jpeg){fig-align="center" width="339"}
:::
:::::

Rstudio es un entorno de desarrollo integrado (**I**ntegrated **D**evelopment **E**nvironment; **IDE**), es decir, en el mismo programa puedes editar código, ejecutarlo en la consola, visualizar imágenes e interactuar con el ambiente.

Por default, la interfaz gráfica de Rstudio se compone de 4 paneles principales:

-   Panel fuente (source)
-   Panel de consola (console)
-   Panel del entorno (envionment)
-   Panel de salida (output) con imagenes, archivos, presentaciones, etc.

![](img/rstudio_panels.jpeg){fig-align="center" width="532"}



#### Consola

La consola se encuentra por default en la parte inferior-izquierda y es donde R espera que se ejecuten las instrucciones. Dichas instrucciones pueden escribirse directamente en la consola o ejecutarse desde el panel de código fuente (script).


#### Panel de script

Por default, este panel se encuentra en la parte superior-izquierda. Este panel de script o código fuente es como un cuaderno de trabajo, donde podemos escribir y editar nuestro código para posteriormente ejecutarlo en la consola. 

Podemos ejecutar nuestro codigo desde el panel de script línea por línea o seleccionando un bloque. 


:::callout-tip
# shortcuts

Para ejecutar una línea o un bloque de forma rápida, presiona la combinacion de teclas

**Ctrl + Enter**
:::


#### Panel de entorno

El panel de entorno (environemnt) es donde se van registrando los objetos, como data frames, vectores, listas, funciones, etc, que vayamos creando en la sesión de trabajo. Esto permite visualizar de forma mas sencilla estos objetos. 
Además, este panel normalmente contiene la pestaña de **History** en la cual se registran todas las instrucciones ejecutadas.


#### Panel de salidas (outputs)

El último panel se encuentra por default en la parte inferior-derecha y en el se despliegan las figuras, contenido html, tutoriales, presentaciones, etc. 

Este panel tambien contiene pestañas que resultaran escenciales para nuestro trabajo:

* **Files**: contiene un explorador de directorios
* **Packages**: Proporciona un listado de los paquetes instalados en R y los que han sido cargados en la sesión. También nos permite instalar nuevos paquetes.
* **Help**: Para obtener ayuda o desplegar el manual de un paquete o función. 

## Generalidades de R

Antes de iniciar en el *Tidyverse* vamos a revisar algunas funcionalidades básicas de R tales como crear objetos y vectores así como revisar los diferentes tipos de estructuras de datos.

Algunos aspectos importantes que debemos recordar son los siguientes:

-   R es sensible a las mayúsculas y minúsculas, de manera que `A` es diferente que `a` de la misma forma que la función `anova()` es diferente a la función `Anova()`

-   El símbolo `#` sirve para insertar un comentario en la línea de comando, de manera que todo lo que siga después de `#` no se ejecutara. Es importante incluir comentarios como parte de las buenas practicas en el uso de R ya que le facilitará el trabajo a tus colaboradores y revisores (y a ti mismo) saber que estas haciendo en cada paso.

-   En la consola usualmente veremos el símbolo `>` lo que la indica que la consola esta lista para recibir nuevas instrucciones. Si por el contrario vemos el símbolo `+` entonces nos esta indicando que no hemos terminado de completar correctamente una línea de código.

-   Si despúes de ejecutar un comando la consola nos arroja un mensaje de advertencia `WARNING` significa que el comando se ejecutó pero hay algo inesperado que debe revisarse. Por el contrario si nos arroja un mensaje de error `ERROR` entonces hay algo mal en la línea de codigo y por lo tanto no se pudo ejecutar.

## Uso de la línea de comando como calculadora

Podemos utilizar R para realizar operaciones básicas:

```{r basicas, echo=TRUE, include=TRUE}
1 + 2 #suma

4 - 3 #resta

5 * 5 #multiplicación

4 / 2 #división

4 ^ 2 #Exponente

4 ** 2 #Exponente
```

Operadores en R:

| Operador |    significado    |
|:--------:|:-----------------:|
|    \*    |  Multiplicación   |
|    \-    |       Resta       |
|    \+    |       Suma        |
|    \^    | Elevar a potencia |
|    /     |     División      |
|    \<    |     Menor que     |
|    \>    |     Mayor que     |
|   \<=    | Menor o igual que |
|   \>=    | Mayor o igual que |
|    ==    | Exactamente igual |
|    !=    |     Distinto      |

## Uso de objetos

Para crear un nuevo objeto se puede usar "=" o "\<-". Este nuevo objeto, se almacenará en la memoria y se puede usar para otras operaciones.

```{r variable, echo=TRUE,warning=FALSE, results=FALSE}

x <- 2 #asignar a la variable x el valor de 2
x

y = 3 #asignar a la variable y el valor de 3
y

#resultado de la suma x + y
x + y

z <- x + y #asiganr el resultado de x + y  a la variable z
z


```

::: callout-warning
# Ejercicio

1.  Cambia el valor de la variable `x` a 5. ¿Que pasa con `z`?
2.  Que tengo que hacer para actualizar el objeto `z`
:::

Las variables no solo puede contener números, sino caracteres, listas o incluso gráficos

```{r more variables, echo=TRUE}
caracter <- "siete"
caracter

```

::: callout-tip
# Consejos para nombrar variables

Es posible asignar casi cualquier nombre a un objeto aunque existen algunas reglas y recomendaciones que hay que considerar:

-   Evita iniciar con un número (`2x` incorrecto pero `x2` es valido).
-   Evita usar nombres de funciones (`ifelse`, `for`, `c`, etc.).
-   Usa guiones bajos para separar palabras. (snake_case).
-   Evita nombres de una sola letra.
-   Procura usar nombres claros y descriptivos. El nombre debe ser lo suficientemente claro para que alguien más (o tú mismo en el futuro) pueda entender su propósito sin necesidad de comentarios adicionales.
:::

::: callout-warning
# Ejercicio:

¿Cuales de estas formas de definir una variables es incorrecta?

-   `mi.variable <-`

-   `mi_variable <-`

-   `mi variable <-`

-   `mi-variable <-`
:::

## Tipos y estructura de datos (Classes)

R tiene los siguientes tipos de datos basicos:

-   `logical:` valores lógicos, pueden ser *TRUE* o *FALSE*
-   `numeric:` números reales *(1.0,2,3.1416, 3E-10)*
-   `character:`caracteres (letras y/o números). Delimitados por "" *("uno", "Miguel", "FALSO")*
-   `interger:`valores enteros *(1,2,3)*
-   `NA:` dato no disponible
-   `NaN:`no es un número (not a number)

Por otro lado, las estructuras de datos pueden ser de tipo vector, data.frame, matriz, arreglo o lista:

![](http://venus.ifca.unican.es/Rintro/_images/dataStructuresNew.png){fig-align="center" width="533"}

fuente: <http://venus.ifca.unican.es/Rintro/_images/dataStructuresNew.png>

Es importante resaltar que solamente los `data.frame` pueden contener distintos tipos de datos (números, caracteres, etc) mientras que el resto solo puede contener un tipo de dato (solo caracteres, solo números, etc).

------------------------------------------------------------------------

Si no sabes que tipo de dato contiene una variable, se puede usar la función `class()`

```{r uso class, echo=TRUE, include=TRUE}

class(x)      

class(caracter)     

```

## Vectores

Un vector es la estructura de datos más sencilla en R. Un vector es una colección de uno o más datos del **mismo tipo**.

Para crear un **vector** utilizamos el comando `c()`, de combinar

```{r}
numeros <- c(1, 2, 3)

numeros
```

También podemos crear un nuevo vector a partir de otros objetos en el ambiente, como por ejemplo, los objetos `x`, `y` y `z` que ya tenemos.

```{r}

variables <- c(x, y, z)
variables
```

Los vectores también pueden contener elementos de otros tipos como **caracteres**, los cuales tienen que ir dentro de comillas `" "`.

```{r}
nombres <- c("Juan", "Pepe", "Sofia")
```

::: callout-warning
# 

¿Que pasa si intentamos unir el vector de caracteres (`nombres`) con números (`variables`)

```{r}
nombre_variable <- c(nombres, variables)
nombre_variable
```

Como las cadenas de texto son el tipo de dato más flexible, siempre que creamos un vector que incluye un dato de este tipo, el resultado será un vector de texto.
:::

# Uso de paquetes y librerías

R hace uso de paquetes que le permiten extender su funcionalidad y disponer de funciones para aplicaciones especificas.

Para instalar un paquete podemos ejecutar la siguiente linea:

```{r}
#| eval: false
install.packages("ggplot2")
```

o hacerlo directamente desde la consola de Rstudio en la pestaña "Paquetes"

![Instalación de paquetes desde Rstudio](img/installpck.PNG){fig-align="center"}

::: callout-warning
# Ojo!

Al instalar un paquete no significa que ya podamos utilizar sus funciones, primero tenemos que cargarlo dentro de nuestro ambiente
:::

Para "activar" o cargar el paquete dentro del ambiente es necesario ejecutar

```{r}
#| eval: false

library(nombre_del_paquete)
```
