[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso: Análisis de datos con Tidyverse",
    "section": "",
    "text": "Date: Date and time\nLugar: Centro de Investigaciones Biológicas del Noroeste, S.C.\nInstructores: Miguel A. Tripp Valdez\n\n\n¡Bienvenidos!\n\n\n\n\n\n\nObjetivos del curso\n\n\n\n\nQue el alumno tenga un panorama detallado sobre el uso de la herramientas dentro del conjunto de paquetes de Tidyverse para importar, manipular, extraer y visualizar información relevante a partir de bases de datos.\nQue el alumno adquiera habilidades prácticas para la manipulación y visualización de datos\nQue el alumno sea capaz de acoplar la experiencia adquirida en este curso para análisis estadísticos, datos genómicos, datos espaciales, etc.\n\n\n\n\nRequisitos\n\nEs deseable que el alumno tenga experiencia básica en el uso de R\nTener acceso internet\nTener instalado R y Rstudio en su computadora\n\n\n\n\nHorario del curso\n\n\n\nTime\nTopic\nPresenter\n\n\n\n\n9:00 - 10:30\nSession 1: Preparation\nInstructor A\n\n\n10:45 - 12:00\nSession 2: Exploratory Analysis\nInstructor B, C"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About page\n\n\n\nThis page contains some elaborated background information about your workshop, or the instructors.\n\n\nFor example: A central problem in machine learning is how to make an algorithm perform well not just on the training data, but also on new inputs. Many strategies in machine learning are explicitly designed to reduce this test error, possibly at the expense of increased training error. These strategies are collectively known as regularisation and they are instrumental for good performance of any kind of prediction or classification model, especially in the context of small data (many features, few samples).\nIn the hands-on tutorial we will use R to perform an integrated analysis of multi-omics data with penalised regression.\n\nContact\nInstructor A: contact\nInstructor B: contact\nInstructor C: contact"
  },
  {
    "objectID": "part_1_prep.html",
    "href": "part_1_prep.html",
    "title": "Preparation",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "part_1_prep.html#software",
    "href": "part_1_prep.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "part_1_prep.html#data",
    "href": "part_1_prep.html#data",
    "title": "Preparation",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#code",
    "href": "part_1_prep.html#code",
    "title": "Preparation",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#resources",
    "href": "part_1_prep.html#resources",
    "title": "Preparation",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "part_2_eda.html",
    "href": "part_2_eda.html",
    "title": "Part I",
    "section": "",
    "text": "Page with R code\n\n\n\nThis page contains an example template for a lab session, where R code and results are displayed here.\nYou can find more information on how to include code in Quarto website here.\nYou can experiment with code-fold and code-tools in the yaml header above to change how the code cells look like."
  },
  {
    "objectID": "part_2_eda.html#a-cancer-modeling-example",
    "href": "part_2_eda.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "apoyo.html",
    "href": "apoyo.html",
    "title": "Recursos de apoyo",
    "section": "",
    "text": "A continuación encontrarás diversos materiales disponibles en la red con la que puedes ampliar tus conocimientos en R y ciencia de datos\n\nLibros en línea\n\nR para Ciencia de Datos - Versión en español de conocido libro R fo Data Science de Wickham y Grolemund\nThe Big Book of R - Extensa colección de libros y materiales en línea\nData Visualization with R - Libro para la creación de gráficos en ggplot\nFundamentals of Data Visualization - Guía para generar visualizaciones efectivas\nQuarto - Guia para generar reportes, páginas web y documentos PDF con Quarto\n\nA quien seguir\n\nPositPBC - Seminarios, tutoriales y comentarios sobre las últimas novedades de la comunidad de Rstudio (Posit)\nR ladies - R-Ladies es una organización mundial cuya misión es promover la diversidad de género en la comunidad R.\nCommunity of Bioinformatics Software Developers - Canal de bioinformática con númerosos tutoriales de R desde nivel principiante hasta análisis avanzados"
  },
  {
    "objectID": "1.Introduccion.html",
    "href": "1.Introduccion.html",
    "title": "Introducción al curso",
    "section": "",
    "text": "Tidyverse no es en si un paquete sino un conjunto de paquetes en el lenguaje de programación R, diseñado para facilitar la manipulación, visualización y análisis de datos. Desarrollado por Hadley Wickham y su equipo, Tidyverse busca proporcionar un enfoque coherente y eficiente para trabajar con datos, promoviendo la claridad, la reproducibilidad y la facilidad de uso en el análisis de datos.\nPodríamos decir que Tidyverse es una filosofía de trabajo que permite que diversos programas y funciones trabajen bajo esta misma filosofía.\n\n\n\n\n\n\n¿Realmente necesito aprender a usar Tidyverse?\n\n\n\nRealmente no. Todas las funciones y herramientas que veremos a lo largo de este curso pueden realizarse utilizando funciones de base de R. Sin embargo, Tidyverse tiene una estructura mas coherente, legible y comprensible."
  },
  {
    "objectID": "1.Introduccion.html#footnotes",
    "href": "1.Introduccion.html#footnotes",
    "title": "Introducción al curso",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTidyverse↩︎"
  },
  {
    "objectID": "2.Proyectos.html",
    "href": "2.Proyectos.html",
    "title": "Parte 1: Proyectos en Rstudio",
    "section": "",
    "text": "@allison_horst\n\n\nIndependientemente de si estás dando tus primeros pasos en R o si ya eres un experto, es frecuente que la primera línea de tu código sea algo como esto:\nsetwd(\"C:\\Users\\miguel\\ruta\\que\\solo\\yo\\tengo\")\nsetwd() toma una ruta absoluta y la establece como el directorio de trabajo activo. El utilizar una ruta absoluta como directorio de trabajo hace que sea difícil de reproducir o de mover ya que otra persona u otro equipo no tiene esa misma ruta absoluta.\n\nProyectos en Rstudio\nLos proyectos de RStudio resuelven el problema de las rutas ‘frágiles’ al hacer que las rutas de archivo sean relativas. El archivo de proyecto de RStudio es un archivo que se encuentra en el directorio raíz, con la extensión .Rproj. Cuando tu sesión de RStudio está siendo ejecutada a través del archivo de proyecto (.Rproj), el directorio de trabajo actual apunta a la carpeta raíz donde se guarda ese archivo .Rproj.\nEste proyecto facilita importar y exportar archivos ya que todos están a la mano a partir de rutas relativas a la carpeta raíz.\n\n\n\n\n\n\nTip\n\n\n\nOtra gran ventaja de los proyectos de Rstudio, es que puedes compartirlo con otra persona manteniendo la estructura de las rutas relativas, de manera que no importa en donde se guarde el proyecto o si esta utilizando otro sistema operativo, las rutas relativas permanecen funcionales siempre y cuando abra la sesión utilizando el proyecto (.Rproj).\n\n\nUn ejemplo de como podemos estructurar un proyecto es el siguiente:\n\n\n\n\n\n\nDatos: Esta es la carpeta en la que se guardan los archivos que necesito leer en R para realizar mi análisis o visualización. Estos pueden ser CSV, TXT, TSV, etc. La idea principal de tener esta carpeta es que estos archivos crudos en ningún momento debería sobrescribir o editar para garantizar la reproducibilidad.\nScript: Aquí es donde puedes guardar los scripts de R y/o archivos RMarkdown o Quarto.\nSalida: En esta carpeta puedes guardar todas tus salidas, incluyendo gráficos, HTML y tablas, etc. Tener esta carpeta de Salida ayuda a otros a identificar qué archivos son resultados del código, en contraste con los archivos fuente que se utilizaron para producir el análisis.\n\n\n\nComo generar un proyecto nuevo\nPara crear un proyecto nuevo sigue estos passos:\n\nAbre Rstudio y selecciona Archivo -&gt; Nuevo Proyecto\n\n\n\n\n\n\n\nSelecciona Nueva Carpeta si estas empezando el proyecto desde cero o carpeta existente si deseas crear un proyecto dentro de alguna carpeta que ya tengas\n\n\n\n\n\n\n\nDa un nombre a tu proyecto y ¡listo! ya puedes empezar a trabajar.\n\nEl proyecto R que has creado estará en una carpeta que contiene un archivo .Rproj. Este archivo es un acceso directo y probablemente la forma más directa de abrir tu proyecto. También puedes abrir un proyecto seleccionando “Open Project” en el menú File. Alternativamente, en el extremo superior derecho de RStudio verás un icono de R projects y un menú desplegable de proyectos disponibles.\n\n\n\n\n\nPara salir de un proyecto R, abre un nuevo proyecto o cierra el proyecto actual (Archivo - Cerrar proyecto).\n\n\n\n\n\n\nEjercicio\n\n\n\nAhora prueba creando un proyecto dentro de una carpeta local en tu computadora y genera una estructura de carpetas como la indicada anteriormente\n\n\n\n\n\n\n\n\nPro tip: uso de here() para rutas relativas\n\n\n\nEl paquete here() se utiliza para construir rutas de archivos y directorios de manera relativa al directorio del proyecto actual. En lugar de utilizar rutas absolutas (que especifican la ruta completa desde la raíz del sistema de archivos) o rutas relativas estándar (que se basan en la ubicación del script en ejecución), here() crea rutas relativas desde el directorio del proyecto."
  },
  {
    "objectID": "3_Data_import.html",
    "href": "3_Data_import.html",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "La importación de archivos de texto es el primer paso y parte fundamental para la exploración de datos. Sin embargo, también puede llegar a ser una tarea complicada.\nLos tipos de archivos mas comunes con los que solemos trabajar son:\n\nComa-separated values (csv)\nTab-separated values (tsv)\nExcel (xls)\nArchivo de texto simple (txt)\n\n\n\nPara importar un archivo a nuestro ambiente podemos utilizar las funciones base read.table, read.csv, read.delim. Por ejemplo, para abrir un archivo txt separado por tabuladores utilizando la función:\n\ndf &lt;- read.table(\"data/palmer_penguins.txt\", header = TRUE, sep = \"\\t\")\nhead(df)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n\n\no usando read.csv\n\ndf &lt;- read.csv(\"data/palmer_penguins.csv\")\nhead(df)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n\n\n\n\n\nDentro del Tidyverse, la importación de datos rectangulares se realiza con el paquete readr el cual tiene funciones que van a sonar muy familiares:\n\nread_csv(): comma-separated values (CSV)\nread_tsv(): tab-separated values (TSV)\nread_csv2(): semicolon-separated values with , as the decimal mark\nread_delim(): delimited files (CSV and TSV are important special cases)\nread_table(): whitespace-separated files\n\n\n\n\n\n\n\n¿Has notado algo?\n\n\n\nComo ves, los nombres de las funciones son muy parecidas a las funciones base pero reemplazando el “.” por un “_”. Esta tendencia se repite en numerosas funciones que siguen la filosofía tidy. Por ejemplo, en lugar de la prueba shapiro.test, rstatix utiliza la función shapiro_test.\n\n\nHagamos la prueba…\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at C:/Users/migue/OneDrive/Documentos/Cursos/Taller_Tidyverse_CIBNOR_2023/CursoTidyverse2023\n\n\n\ndf &lt;- read_table(\"data/palmer_penguins.txt\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  species = col_character(),\n  island = col_character(),\n  bill_length_mm = col_double(),\n  bill_depth_mm = col_double(),\n  flipper_length_mm = col_double(),\n  body_mass_g = col_double(),\n  sex = col_character(),\n  year = col_double()\n)\n\n\nObserva como, aún antes de desplegar la tabla,read_table ya nos arroja información sobre la estructura de los datos y nos indica si cada columna es número, carácter u otro.\nAhora observa como se despliega la tabla\n\ndf\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\n\n¿double? ¿character? 😱\n\n\n\nEn caso de que no lo recuerdes, estos son los principales tipos de datos en R\n\n\n\nTipo\nDescripción\nEjemplo\n\n\nNumeric\ninterger números enteros\n0L, 1L\n\n\nNumeric\ndouble números reales\n1.0,\n\n\nLogic\nvalores booleanos\nTRUE, FALSE\n\n\nCharacter\ncadena de texto\n“Hola mundo”\n\n\nFactor\nrepresentan datos categóricos\nmacho, hembra\n\n\nDates\nFechas\n“2023-08-24”\n\n\n\n\n\n\n\n\nCon R base, la función read.table nos genera un data frame pero readr nos genera un tibble los cuales son una versión actualizada de un data frame.\nHay varias diferencias entre tibbles y data.frames. Puedes leer mas en la viñeta. Sin embargo, algunas de las diferencias mas notables son:\n\nEl tipo de entrada permanece inalterado: los data.frames son conocidos por tratar las cadenas de texto como factores; esto no sucederá con los tibbles.\nLos nombres de las variables permanecen inalterados: En R base, al crear data.frames se eliminan los espacios de los nombres, convirtiéndolos en puntos o agregando una “x” antes de los nombres de las columnas numéricas. Al crear tibbles, los nombres de las variables (columnas) no cambian.\nNo hay row.names() para un tibble: Los datos ordenados requieren que las variables se almacenen de manera consistente, eliminando la necesidad de nombres de filas. Los tibbles imprimen las primeras diez filas y columnas que caben en una pantalla: Imprimir un tibble en la pantalla nunca mostrará todo el enorme marco de datos. Por defecto, solo muestra lo que cabe en tu pantalla.\n\n\n\nSi tenemos datos rectangulares como data.frame podemos convertirlo facilmente a tibble con la función as_tibble()\nPor ejemplo, podemos:\n\nas_tibble(trees)\n\n# A tibble: 31 × 3\n   Girth Height Volume\n   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1   8.3     70   10.3\n 2   8.6     65   10.3\n 3   8.8     63   10.2\n 4  10.5     72   16.4\n 5  10.7     81   18.8\n 6  10.8     83   19.7\n 7  11       66   15.6\n 8  11       75   18.2\n 9  11.1     80   22.6\n10  11.2     75   19.9\n# ℹ 21 more rows\n\n\n\n\n\n\n\n\nWarning\n\n\n\nRecuerda que si solo ejecutamos el comando as_tibble(trees) R solo nos arrojará el resutlado en la consola pero no hizo ningún cambio al objeto trees. Para esto necesitamos renombrar o generar un nuevo objeto. Por ejemplo\n\ntrees_tbl &lt;- as_tibble(trees)\n\nahora si, tenemos un nuevo objetvo como tibble\n\nclass(trees)\n\n[1] \"data.frame\"\n\nclass(trees_tbl)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\nAl igual que como lo hariamos con un data.frame o una matriz, podemos acceder a las primeras o últimas filas de nuestro tibble con las funciones head() y tail()\n\nhead(df)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\ntail(df)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\nTambién es posible hacer tibble sobre la marcha utilizando la función tibble(). Por ejemplo:\n\nmi_tibl &lt;- tibble(\n  a = 1:5,\n  b = 6:10,\n  c = 1,\n  z = (a + b)^2 + c\n)\n\nNota que al momento de generar este tibble, puedes hacer referencias a columnas del mismo tibble (columa z)\nOtro comportamiento de los tibbles es que es posible tener nombres de columnas con espacios u otros caracteres y estos estarán rodeados por ``\n\nmi_tibl &lt;- tibble(\n  `cinco números` = 1:5,\n  `12` = \"numeric\",\n  `:)` = \"smile\",\n)\n\n\n\n\n\nLas hojas de calculo de excel (formatos .xls o .xlsx) siguen siendo muy comunes y muy utilizados dentro de la comunidad académica.\nTidyverse no tiende dentro de su núcleo una función para importar este tipo de archivos, pero esto se soluciona fácilmente con el paquete readxl.\n\n\n\n\n\n\ninstall.packages(\"readxl\")\n\n\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.3.1\n\n\nCon esto podemos usar la función read_excel() que no necesita ningún otro argumento mas que la ruta (path) donde se encuentra el archivo .xlsx\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas.xlsx\")\n\nexcel_df\n\n# A tibble: 405 × 18\n   `Sample ID` ExpNum TreatTemp Meas_Temp `WetWeight(g)` `buffer(ml)`\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;        &lt;dbl&gt;\n 1 Hf100U           3        24        18          0.093         0.93\n 2 Hf100U           3        24        18          0.093         0.93\n 3 Hf100U           3        24        32          0.093         0.93\n 4 Hf100U           3        24        32          0.093         0.93\n 5 Hf101U           3        30        18          0.114         1.14\n 6 Hf101U           3        30        18          0.114         1.14\n 7 Hf101U           3        30        32          0.114         1.14\n 8 Hf101U           3        30        32          0.114         1.14\n 9 Hf102U           3        30        18          0.092         0.92\n10 Hf102U           3        30        18          0.092         0.92\n# ℹ 395 more rows\n# ℹ 12 more variables: `MessVol(ul)` &lt;dbl&gt;, slopeLDH &lt;dbl&gt;, slopeTDH &lt;dbl&gt;,\n#   slopeCS &lt;dbl&gt;, ActivityLDH &lt;dbl&gt;, ActivityTDH &lt;dbl&gt;, ActivityCS &lt;dbl&gt;,\n#   Date &lt;dttm&gt;, protein &lt;dbl&gt;, ActivityLDHprot &lt;dbl&gt;, ActivityTDHprot &lt;dbl&gt;,\n#   ActivityCSprot &lt;dbl&gt;\n\n\nEn caso de que los datos de interes estén en una hoja en particular usamos el argumento sheet=\n\nexcel_df&lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", sheet = \"hoja2\",)\n\nUn caso mas complicado es cuando nuestro datos inician unas filas mas abajo y en un determinado intervalo de columnas. Otro caso común es que los nombres de las columnas tengan símbolos especiales o que estén repetidos\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", skip = 3, na = \"-\")\n\nNew names:\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   `Número de muestra` `Número de experimento` Tratamiento Temperatura\n   &lt;chr&gt;                                 &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                    3          24          18\n 2 Hf100U                                    3          24          18\n 3 Hf100U                                    3          24          32\n 4 Hf100U                                    3          24          32\n 5 Hf101U                                    3          30          18\n 6 Hf101U                                    3          30          18\n 7 Hf101U                                    3          30          32\n 8 Hf101U                                    3          30          32\n 9 Hf102U                                    3          30          18\n10 Hf102U                                    3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: `peso húmedo (g)` &lt;dbl&gt;, `buffer (ml)` &lt;dbl&gt;,\n#   `volumen de reaccion (ul)` &lt;dbl&gt;, `concentración g/ml` &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;\n\n\nEn caso de que tengamos otra información que nos este generando conflico podemos especificar el rango de datos de interés\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\")\n\nNew names:\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   `Número de muestra` `Número de experimento` Tratamiento Temperatura\n   &lt;chr&gt;                                 &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                    3          24          18\n 2 Hf100U                                    3          24          18\n 3 Hf100U                                    3          24          32\n 4 Hf100U                                    3          24          32\n 5 Hf101U                                    3          30          18\n 6 Hf101U                                    3          30          18\n 7 Hf101U                                    3          30          32\n 8 Hf101U                                    3          30          32\n 9 Hf102U                                    3          30          18\n10 Hf102U                                    3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: `peso húmedo (g)` &lt;dbl&gt;, `buffer (ml)` &lt;dbl&gt;,\n#   `volumen de reaccion (ul)` &lt;dbl&gt;, `concentración g/ml` &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;\n\n\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\",\n                       .name_repair =  \"universal\")\n\nNew names:\n• `Número de muestra` -&gt; `Número.de.muestra`\n• `Número de experimento` -&gt; `Número.de.experimento`\n• `peso húmedo (g)` -&gt; `peso.húmedo..g.`\n• `buffer (ml)` -&gt; `buffer..ml.`\n• `volumen de reaccion (ul)` -&gt; `volumen.de.reaccion..ul.`\n• `concentración g/ml` -&gt; `concentración.g.ml`\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   Número.de.muestra Número.de.experimento Tratamiento Temperatura\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                3          24          18\n 2 Hf100U                                3          24          18\n 3 Hf100U                                3          24          32\n 4 Hf100U                                3          24          32\n 5 Hf101U                                3          30          18\n 6 Hf101U                                3          30          18\n 7 Hf101U                                3          30          32\n 8 Hf101U                                3          30          32\n 9 Hf102U                                3          30          18\n10 Hf102U                                3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: peso.húmedo..g. &lt;dbl&gt;, buffer..ml. &lt;dbl&gt;,\n#   volumen.de.reaccion..ul. &lt;dbl&gt;, concentración.g.ml &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\n\nEl paquete Janitor es una herramienta pequeña pero increíblemente útil y conveniente cuando se trata de limpiar y mantener conjuntos de datos en RStudio. Además, es un paquete orientado a “tidyverse”, por lo que se integra perfectamente con los pipes.\nRegresemos a los nombres de las columnas de nuestro archivo excel antes de utilizar janitor\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\",\n                       .name_repair =  \"universal\")\n\n\n\n [1] \"Número.de.muestra\"        \"Número.de.experimento\"   \n [3] \"Tratamiento\"              \"Temperatura\"             \n [5] \"peso.húmedo..g.\"          \"buffer..ml.\"             \n [7] \"volumen.de.reaccion..ul.\" \"concentración.g.ml\"      \n [9] \"pendiente...9\"            \"pendiente...10\"          \n\n\n\nNo hay consistencia entre el uso de mayúsculas y minúsculas en los nombres. Recuerda que R es sensible a mayúsculas, por lo que Temperatura no es lo mismo que temperatura.\nTenemos símbolos como acentos que nos pueden generar conflictos, sobre todo si tenemos símbolos en otros idiomas.\nLos espacios en blanco así como otros símbolos como / son reemplazados por un punto. Esto genera etiquetas complicadas.\n\nLo ideal es tener consistencia en el formato de las etiquetas. Algunos formatos conocidos son los siguientes:\n\n\n\n\n\nAhora utilicemos janitor para limpiar las etiquetas\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.3.1\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\nexcel_clean &lt;- clean_names(excel_df)\nexcel_clean\n\n# A tibble: 405 × 10\n   numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente_9 &lt;dbl&gt;, pendiente_10 &lt;dbl&gt;\n\n\nlas opciones son:\n\n“snake”\n“small_camel”\n“big_camel”\n“screaming_snake”\n“parsed”\n“lower_upper”\n“upper_lower”\n\npor ejemplo:\n\nexcel_clean &lt;- clean_names(excel_df, case = \"screaming_snake\")\nexcel_clean\n\n# A tibble: 405 × 10\n   NUMERO_DE_MUESTRA NUMERO_DE_EXPERIMENTO TRATAMIENTO TEMPERATURA PESO_HUMEDO_G\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: BUFFER_ML &lt;dbl&gt;, VOLUMEN_DE_REACCION_UL &lt;dbl&gt;,\n#   CONCENTRACION_G_ML &lt;dbl&gt;, PENDIENTE_9 &lt;dbl&gt;, PENDIENTE_10 &lt;dbl&gt;\n\n\nCon janitor podemos integrar la función make_clean_name al momento de importar datos ya sea con readxl o con readr. Por ejemplo:\n\nexcel_clean &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\",\n                       .name_repair =  make_clean_names)\nexcel_clean\n\n# A tibble: 405 × 10\n   numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente &lt;dbl&gt;, pendiente_2 &lt;dbl&gt;\n\n\n\n\n\n\n\n\nWarning\n\n\n\nObserva que tanto readxl como readr interpretan las columnas de número de experimento, tratamiento y temperatura como variables numéricas debido a que analizan la cantidad de datos para inferir el tipo de variable. No obstante, estas variables son en realidad factores, ya que representan categorías. Más adelante veremos cómo realizar este ajuste de manera manual.\n\n\n\n\n\nUn aspecto importante para el análisis de datos es tener una perspectiva rápida del tibble o datafram para entender las variables que tenemos, asi como los patrones generales de los datos.\nHay varias funciones que podemos utilizar. Ya mencionamos algunas herramienta como head() o tail() para echar un vistazo a las primeras o últimas filas de la tabla, respectivamente.\nOtra herramienta es la función glimpse() de dplyr que nos muestra algunos datos de cada columna de nuestro tibble para tener una idea de la estructura de la tabla.\n\nglimpse(excel_clean)\n\nRows: 405\nColumns: 10\n$ numero_de_muestra      &lt;chr&gt; \"Hf100U\", \"Hf100U\", \"Hf100U\", \"Hf100U\", \"Hf101U…\n$ numero_de_experimento  &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ tratamiento            &lt;dbl&gt; 24, 24, 24, 24, 30, 30, 30, 30, 30, 30, 30, 30,…\n$ temperatura            &lt;dbl&gt; 18, 18, 32, 32, 18, 18, 32, 32, 18, 18, 32, 32,…\n$ peso_humedo_g          &lt;dbl&gt; 0.093, 0.093, 0.093, 0.093, 0.114, 0.114, 0.114…\n$ buffer_ml              &lt;dbl&gt; 0.93, 0.93, 0.93, 0.93, 1.14, 1.14, 1.14, 1.14,…\n$ volumen_de_reaccion_ul &lt;dbl&gt; 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10,…\n$ concentracion_g_ml     &lt;dbl&gt; 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.…\n$ pendiente              &lt;dbl&gt; 0.0331, 0.0145, 0.1431, 0.0653, 0.0354, 0.0155,…\n$ pendiente_2            &lt;dbl&gt; 2.660772, 2.331190, 11.503215, 10.498392, 2.845…\n\n\nLa función summary() es parte de las funciones base de R y es particularmente útil cuando tenemos datos continuos, ya que nos muestra, para cada columna, los valores mínimos, máximos, promedio, mediana y el 1er y 3er quartil.\n\nsummary(excel_clean)\n\n numero_de_muestra  numero_de_experimento  tratamiento     temperatura   \n Length:405         Min.   :1.000         Min.   :18.00   Min.   :18.00  \n Class :character   1st Qu.:2.000         1st Qu.:24.00   1st Qu.:18.00  \n Mode  :character   Median :3.000         Median :24.00   Median :18.00  \n                    Mean   :2.528         Mean   :26.04   Mean   :24.74  \n                    3rd Qu.:4.000         3rd Qu.:30.00   3rd Qu.:32.00  \n                    Max.   :4.000         Max.   :32.00   Max.   :32.00  \n                                                                         \n peso_humedo_g       buffer_ml      volumen_de_reaccion_ul concentracion_g_ml\n Min.   :0.02900   Min.   :0.2900   Min.   :10.00          Min.   :0.1       \n 1st Qu.:0.06700   1st Qu.:0.6700   1st Qu.:10.00          1st Qu.:0.1       \n Median :0.08500   Median :0.8500   Median :20.00          Median :0.1       \n Mean   :0.08387   Mean   :0.8387   Mean   :15.04          Mean   :0.1       \n 3rd Qu.:0.09900   3rd Qu.:0.9900   3rd Qu.:20.00          3rd Qu.:0.1       \n Max.   :0.18900   Max.   :1.8900   Max.   :20.00          Max.   :0.1       \n                                                                             \n   pendiente        pendiente_2    \n Min.   :0.00000   Min.   : 0.000  \n 1st Qu.:0.01480   1st Qu.: 1.632  \n Median :0.03500   Median : 4.594  \n Mean   :0.04949   Mean   : 5.205  \n 3rd Qu.:0.07290   3rd Qu.: 8.163  \n Max.   :0.31390   Max.   :25.233  \n                   NA's   :13      \n\n\nOtra herramienta un poco mas sofisticada pero bastante útil es la función gt_plt_summary() del paquete gtExtras, la cual nos permite gráficar cada una de las variables, nos muestra los valores promedio, mediana y desvicación, y ádemas nos muestra el % de valores faltantes (missing).\nPara utilizar esta herramienta, primero necesitamos instalar el paquete gtExtras y posteriormente cargar la librería.\n\ninstall.packages(\"gtExtras\")\n\n\nlibrary(gtExtras)\n\nWarning: package 'gtExtras' was built under R version 4.3.1\n\ngt_plt_summary(excel_clean)\n\nWarning: Computation failed in `stat_bin()`\nCaused by error in `bin_breaks_width()`:\n! The number of histogram bins must be less than 1,000,000.\nℹ Did you make `binwidth` too small?\n\n\n\n\n\n\n  \n    \n      excel_clean\n    \n    \n      405 rows x 10 cols\n    \n    \n      \n      Column\n      Plot Overview\n      Missing\n      Mean\n      Median\n      SD\n    \n  \n  \n    \nnumero_de_muestra\n                  96 categories\n0.0%\n—\n—\n—\n    \nnumero_de_experimento\n                  14\n0.0%\n2.5\n3.0\n1.1\n    \ntratamiento\n                  1832\n0.0%\n26.0\n24.0\n5.4\n    \ntemperatura\n                  1832\n0.0%\n24.7\n18.0\n7.0\n    \npeso_humedo_g\n                  0.030.19\n0.0%\n0.1\n0.1\n0.0\n    \nbuffer_ml\n                  0.31.9\n0.0%\n0.8\n0.8\n0.3\n    \nvolumen_de_reaccion_ul\n                  1020\n0.0%\n15.0\n20.0\n5.0\n    \nconcentracion_g_ml\n                  00\n0.0%\n0.1\n0.1\n0.0\n    \npendiente\n                  0.000.31\n0.0%\n0.0\n0.0\n0.0\n    \npendiente_2\n                  025\n3.2%\n5.2\n4.6\n4.2\n  \n  \n  \n\n\n\n\n\n\n\nUna vez terminado nuestro análisis debemos guardarlo. Siguiendo la recomendación que vimos anteriormente, lo ideal es guardar los datos ya procesados (ya sea que se haya realizado algún tipo de filtrado o transformación) en una carpeta diferente a la carpeta donde están los datos crudos, los cuales se recomienda que se preserven sin alteraciones.\nPodemos crear una nueva carpeta con Archivos &gt; Nuevo directorio o desde la línea de comando usando la función dir.create()\n\ndir.create(\"resultados/tablas\", recursive = TRUE)\n\nWarning in dir.create(\"resultados/tablas\", recursive = TRUE):\n'resultados\\tablas' already exists\n\n\nPara guardar nuestros datos, las funciones que utilizaremos mas frecuentemente son write.table y write_csv()\nPor ejemplo, vamos a tomar las primeras filas de nuestro objeto excel_clean con la función head()\n\nexcel_subset &lt;- head(excel_clean)\nexcel_subset\n\n# A tibble: 6 × 10\n  numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n  &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1 Hf100U                                3          24          18         0.093\n2 Hf100U                                3          24          18         0.093\n3 Hf100U                                3          24          32         0.093\n4 Hf100U                                3          24          32         0.093\n5 Hf101U                                3          30          18         0.114\n6 Hf101U                                3          30          18         0.114\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente &lt;dbl&gt;, pendiente_2 &lt;dbl&gt;\n\n\nAhora lo guardamos en la carpeta que acabamos de crear usando la función write_csv()\n\nwrite_csv(excel_subset, file = here(\"resultados/tablas/\", \"excel_subset.csv\"))\n\no con write.table() la cual nos permite usar una mayor diversidad de formatos\n\nwrite.table(excel_subset, file = here(\"resultados/tablas/\", \"excel_subset.txt\"), sep = \"\\t\")"
  },
  {
    "objectID": "3_Data_import.html#funciones-base-para-importar-archivos",
    "href": "3_Data_import.html#funciones-base-para-importar-archivos",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "Para importar un archivo a nuestro ambiente podemos utilizar las funciones base read.table, read.csv, read.delim. Por ejemplo, para abrir un archivo txt separado por tabuladores utilizando la función:\n\ndf &lt;- read.table(\"data/palmer_penguins.txt\", header = TRUE, sep = \"\\t\")\nhead(df)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n\n\no usando read.csv\n\ndf &lt;- read.csv(\"data/palmer_penguins.csv\")\nhead(df)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007"
  },
  {
    "objectID": "3_Data_import.html#importar-datos-a-lá-tidyverse",
    "href": "3_Data_import.html#importar-datos-a-lá-tidyverse",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "Dentro del Tidyverse, la importación de datos rectangulares se realiza con el paquete readr el cual tiene funciones que van a sonar muy familiares:\n\nread_csv(): comma-separated values (CSV)\nread_tsv(): tab-separated values (TSV)\nread_csv2(): semicolon-separated values with , as the decimal mark\nread_delim(): delimited files (CSV and TSV are important special cases)\nread_table(): whitespace-separated files\n\n\n\n\n\n\n\n¿Has notado algo?\n\n\n\nComo ves, los nombres de las funciones son muy parecidas a las funciones base pero reemplazando el “.” por un “_”. Esta tendencia se repite en numerosas funciones que siguen la filosofía tidy. Por ejemplo, en lugar de la prueba shapiro.test, rstatix utiliza la función shapiro_test.\n\n\nHagamos la prueba…\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at C:/Users/migue/OneDrive/Documentos/Cursos/Taller_Tidyverse_CIBNOR_2023/CursoTidyverse2023\n\n\n\ndf &lt;- read_table(\"data/palmer_penguins.txt\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  species = col_character(),\n  island = col_character(),\n  bill_length_mm = col_double(),\n  bill_depth_mm = col_double(),\n  flipper_length_mm = col_double(),\n  body_mass_g = col_double(),\n  sex = col_character(),\n  year = col_double()\n)\n\n\nObserva como, aún antes de desplegar la tabla,read_table ya nos arroja información sobre la estructura de los datos y nos indica si cada columna es número, carácter u otro.\nAhora observa como se despliega la tabla\n\ndf\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\n\n¿double? ¿character? 😱\n\n\n\nEn caso de que no lo recuerdes, estos son los principales tipos de datos en R\n\n\n\nTipo\nDescripción\nEjemplo\n\n\nNumeric\ninterger números enteros\n0L, 1L\n\n\nNumeric\ndouble números reales\n1.0,\n\n\nLogic\nvalores booleanos\nTRUE, FALSE\n\n\nCharacter\ncadena de texto\n“Hola mundo”\n\n\nFactor\nrepresentan datos categóricos\nmacho, hembra\n\n\nDates\nFechas\n“2023-08-24”"
  },
  {
    "objectID": "3_Data_import.html#tibbles",
    "href": "3_Data_import.html#tibbles",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "Con R base, la función read.table nos genera un data frame pero readr nos genera un tibble los cuales son una versión actualizada de un data frame.\nHay varias diferencias entre tibbles y data.frames. Puedes leer mas en la viñeta. Sin embargo, algunas de las diferencias mas notables son:\n\nEl tipo de entrada permanece inalterado: los data.frames son conocidos por tratar las cadenas de texto como factores; esto no sucederá con los tibbles.\nLos nombres de las variables permanecen inalterados: En R base, al crear data.frames se eliminan los espacios de los nombres, convirtiéndolos en puntos o agregando una “x” antes de los nombres de las columnas numéricas. Al crear tibbles, los nombres de las variables (columnas) no cambian.\nNo hay row.names() para un tibble: Los datos ordenados requieren que las variables se almacenen de manera consistente, eliminando la necesidad de nombres de filas. Los tibbles imprimen las primeras diez filas y columnas que caben en una pantalla: Imprimir un tibble en la pantalla nunca mostrará todo el enorme marco de datos. Por defecto, solo muestra lo que cabe en tu pantalla.\n\n\n\nSi tenemos datos rectangulares como data.frame podemos convertirlo facilmente a tibble con la función as_tibble()\nPor ejemplo, podemos:\n\nas_tibble(trees)\n\n# A tibble: 31 × 3\n   Girth Height Volume\n   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1   8.3     70   10.3\n 2   8.6     65   10.3\n 3   8.8     63   10.2\n 4  10.5     72   16.4\n 5  10.7     81   18.8\n 6  10.8     83   19.7\n 7  11       66   15.6\n 8  11       75   18.2\n 9  11.1     80   22.6\n10  11.2     75   19.9\n# ℹ 21 more rows\n\n\n\n\n\n\n\n\nWarning\n\n\n\nRecuerda que si solo ejecutamos el comando as_tibble(trees) R solo nos arrojará el resutlado en la consola pero no hizo ningún cambio al objeto trees. Para esto necesitamos renombrar o generar un nuevo objeto. Por ejemplo\n\ntrees_tbl &lt;- as_tibble(trees)\n\nahora si, tenemos un nuevo objetvo como tibble\n\nclass(trees)\n\n[1] \"data.frame\"\n\nclass(trees_tbl)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\nAl igual que como lo hariamos con un data.frame o una matriz, podemos acceder a las primeras o últimas filas de nuestro tibble con las funciones head() y tail()\n\nhead(df)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\ntail(df)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\nTambién es posible hacer tibble sobre la marcha utilizando la función tibble(). Por ejemplo:\n\nmi_tibl &lt;- tibble(\n  a = 1:5,\n  b = 6:10,\n  c = 1,\n  z = (a + b)^2 + c\n)\n\nNota que al momento de generar este tibble, puedes hacer referencias a columnas del mismo tibble (columa z)\nOtro comportamiento de los tibbles es que es posible tener nombres de columnas con espacios u otros caracteres y estos estarán rodeados por ``\n\nmi_tibl &lt;- tibble(\n  `cinco números` = 1:5,\n  `12` = \"numeric\",\n  `:)` = \"smile\",\n)"
  },
  {
    "objectID": "3_Data_import.html#importar-desde-excel",
    "href": "3_Data_import.html#importar-desde-excel",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "Las hojas de calculo de excel (formatos .xls o .xlsx) siguen siendo muy comunes y muy utilizados dentro de la comunidad académica.\nTidyverse no tiende dentro de su núcleo una función para importar este tipo de archivos, pero esto se soluciona fácilmente con el paquete readxl.\n\n\n\n\n\n\ninstall.packages(\"readxl\")\n\n\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.3.1\n\n\nCon esto podemos usar la función read_excel() que no necesita ningún otro argumento mas que la ruta (path) donde se encuentra el archivo .xlsx\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas.xlsx\")\n\nexcel_df\n\n# A tibble: 405 × 18\n   `Sample ID` ExpNum TreatTemp Meas_Temp `WetWeight(g)` `buffer(ml)`\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;        &lt;dbl&gt;\n 1 Hf100U           3        24        18          0.093         0.93\n 2 Hf100U           3        24        18          0.093         0.93\n 3 Hf100U           3        24        32          0.093         0.93\n 4 Hf100U           3        24        32          0.093         0.93\n 5 Hf101U           3        30        18          0.114         1.14\n 6 Hf101U           3        30        18          0.114         1.14\n 7 Hf101U           3        30        32          0.114         1.14\n 8 Hf101U           3        30        32          0.114         1.14\n 9 Hf102U           3        30        18          0.092         0.92\n10 Hf102U           3        30        18          0.092         0.92\n# ℹ 395 more rows\n# ℹ 12 more variables: `MessVol(ul)` &lt;dbl&gt;, slopeLDH &lt;dbl&gt;, slopeTDH &lt;dbl&gt;,\n#   slopeCS &lt;dbl&gt;, ActivityLDH &lt;dbl&gt;, ActivityTDH &lt;dbl&gt;, ActivityCS &lt;dbl&gt;,\n#   Date &lt;dttm&gt;, protein &lt;dbl&gt;, ActivityLDHprot &lt;dbl&gt;, ActivityTDHprot &lt;dbl&gt;,\n#   ActivityCSprot &lt;dbl&gt;\n\n\nEn caso de que los datos de interes estén en una hoja en particular usamos el argumento sheet=\n\nexcel_df&lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", sheet = \"hoja2\",)\n\nUn caso mas complicado es cuando nuestro datos inician unas filas mas abajo y en un determinado intervalo de columnas. Otro caso común es que los nombres de las columnas tengan símbolos especiales o que estén repetidos\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", skip = 3, na = \"-\")\n\nNew names:\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   `Número de muestra` `Número de experimento` Tratamiento Temperatura\n   &lt;chr&gt;                                 &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                    3          24          18\n 2 Hf100U                                    3          24          18\n 3 Hf100U                                    3          24          32\n 4 Hf100U                                    3          24          32\n 5 Hf101U                                    3          30          18\n 6 Hf101U                                    3          30          18\n 7 Hf101U                                    3          30          32\n 8 Hf101U                                    3          30          32\n 9 Hf102U                                    3          30          18\n10 Hf102U                                    3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: `peso húmedo (g)` &lt;dbl&gt;, `buffer (ml)` &lt;dbl&gt;,\n#   `volumen de reaccion (ul)` &lt;dbl&gt;, `concentración g/ml` &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;\n\n\nEn caso de que tengamos otra información que nos este generando conflico podemos especificar el rango de datos de interés\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\")\n\nNew names:\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   `Número de muestra` `Número de experimento` Tratamiento Temperatura\n   &lt;chr&gt;                                 &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                    3          24          18\n 2 Hf100U                                    3          24          18\n 3 Hf100U                                    3          24          32\n 4 Hf100U                                    3          24          32\n 5 Hf101U                                    3          30          18\n 6 Hf101U                                    3          30          18\n 7 Hf101U                                    3          30          32\n 8 Hf101U                                    3          30          32\n 9 Hf102U                                    3          30          18\n10 Hf102U                                    3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: `peso húmedo (g)` &lt;dbl&gt;, `buffer (ml)` &lt;dbl&gt;,\n#   `volumen de reaccion (ul)` &lt;dbl&gt;, `concentración g/ml` &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;\n\n\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\",\n                       .name_repair =  \"universal\")\n\nNew names:\n• `Número de muestra` -&gt; `Número.de.muestra`\n• `Número de experimento` -&gt; `Número.de.experimento`\n• `peso húmedo (g)` -&gt; `peso.húmedo..g.`\n• `buffer (ml)` -&gt; `buffer..ml.`\n• `volumen de reaccion (ul)` -&gt; `volumen.de.reaccion..ul.`\n• `concentración g/ml` -&gt; `concentración.g.ml`\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   Número.de.muestra Número.de.experimento Tratamiento Temperatura\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                3          24          18\n 2 Hf100U                                3          24          18\n 3 Hf100U                                3          24          32\n 4 Hf100U                                3          24          32\n 5 Hf101U                                3          30          18\n 6 Hf101U                                3          30          18\n 7 Hf101U                                3          30          32\n 8 Hf101U                                3          30          32\n 9 Hf102U                                3          30          18\n10 Hf102U                                3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: peso.húmedo..g. &lt;dbl&gt;, buffer..ml. &lt;dbl&gt;,\n#   volumen.de.reaccion..ul. &lt;dbl&gt;, concentración.g.ml &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;"
  },
  {
    "objectID": "3_Data_import.html#limpiar-etiquetas-con-janitor",
    "href": "3_Data_import.html#limpiar-etiquetas-con-janitor",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "El paquete Janitor es una herramienta pequeña pero increíblemente útil y conveniente cuando se trata de limpiar y mantener conjuntos de datos en RStudio. Además, es un paquete orientado a “tidyverse”, por lo que se integra perfectamente con los pipes.\nRegresemos a los nombres de las columnas de nuestro archivo excel antes de utilizar janitor\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\",\n                       .name_repair =  \"universal\")\n\n\n\n [1] \"Número.de.muestra\"        \"Número.de.experimento\"   \n [3] \"Tratamiento\"              \"Temperatura\"             \n [5] \"peso.húmedo..g.\"          \"buffer..ml.\"             \n [7] \"volumen.de.reaccion..ul.\" \"concentración.g.ml\"      \n [9] \"pendiente...9\"            \"pendiente...10\"          \n\n\n\nNo hay consistencia entre el uso de mayúsculas y minúsculas en los nombres. Recuerda que R es sensible a mayúsculas, por lo que Temperatura no es lo mismo que temperatura.\nTenemos símbolos como acentos que nos pueden generar conflictos, sobre todo si tenemos símbolos en otros idiomas.\nLos espacios en blanco así como otros símbolos como / son reemplazados por un punto. Esto genera etiquetas complicadas.\n\nLo ideal es tener consistencia en el formato de las etiquetas. Algunos formatos conocidos son los siguientes:\n\n\n\n\n\nAhora utilicemos janitor para limpiar las etiquetas\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.3.1\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\nexcel_clean &lt;- clean_names(excel_df)\nexcel_clean\n\n# A tibble: 405 × 10\n   numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente_9 &lt;dbl&gt;, pendiente_10 &lt;dbl&gt;\n\n\nlas opciones son:\n\n“snake”\n“small_camel”\n“big_camel”\n“screaming_snake”\n“parsed”\n“lower_upper”\n“upper_lower”\n\npor ejemplo:\n\nexcel_clean &lt;- clean_names(excel_df, case = \"screaming_snake\")\nexcel_clean\n\n# A tibble: 405 × 10\n   NUMERO_DE_MUESTRA NUMERO_DE_EXPERIMENTO TRATAMIENTO TEMPERATURA PESO_HUMEDO_G\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: BUFFER_ML &lt;dbl&gt;, VOLUMEN_DE_REACCION_UL &lt;dbl&gt;,\n#   CONCENTRACION_G_ML &lt;dbl&gt;, PENDIENTE_9 &lt;dbl&gt;, PENDIENTE_10 &lt;dbl&gt;\n\n\nCon janitor podemos integrar la función make_clean_name al momento de importar datos ya sea con readxl o con readr. Por ejemplo:\n\nexcel_clean &lt;- read_excel(\"data/actividad_enzimas_completo.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\",\n                       .name_repair =  make_clean_names)\nexcel_clean\n\n# A tibble: 405 × 10\n   numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente &lt;dbl&gt;, pendiente_2 &lt;dbl&gt;\n\n\n\n\n\n\n\n\nWarning\n\n\n\nObserva que tanto readxl como readr interpretan las columnas de número de experimento, tratamiento y temperatura como variables numéricas debido a que analizan la cantidad de datos para inferir el tipo de variable. No obstante, estas variables son en realidad factores, ya que representan categorías. Más adelante veremos cómo realizar este ajuste de manera manual."
  },
  {
    "objectID": "3_Data_import.html#echando-un-vistado-a-los-datos",
    "href": "3_Data_import.html#echando-un-vistado-a-los-datos",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "Un aspecto importante para el análisis de datos es tener una perspectiva rápida del tibble o datafram para entender las variables que tenemos, asi como los patrones generales de los datos.\nHay varias funciones que podemos utilizar. Ya mencionamos algunas herramienta como head() o tail() para echar un vistazo a las primeras o últimas filas de la tabla, respectivamente.\nOtra herramienta es la función glimpse() de dplyr que nos muestra algunos datos de cada columna de nuestro tibble para tener una idea de la estructura de la tabla.\n\nglimpse(excel_clean)\n\nRows: 405\nColumns: 10\n$ numero_de_muestra      &lt;chr&gt; \"Hf100U\", \"Hf100U\", \"Hf100U\", \"Hf100U\", \"Hf101U…\n$ numero_de_experimento  &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ tratamiento            &lt;dbl&gt; 24, 24, 24, 24, 30, 30, 30, 30, 30, 30, 30, 30,…\n$ temperatura            &lt;dbl&gt; 18, 18, 32, 32, 18, 18, 32, 32, 18, 18, 32, 32,…\n$ peso_humedo_g          &lt;dbl&gt; 0.093, 0.093, 0.093, 0.093, 0.114, 0.114, 0.114…\n$ buffer_ml              &lt;dbl&gt; 0.93, 0.93, 0.93, 0.93, 1.14, 1.14, 1.14, 1.14,…\n$ volumen_de_reaccion_ul &lt;dbl&gt; 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10,…\n$ concentracion_g_ml     &lt;dbl&gt; 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.…\n$ pendiente              &lt;dbl&gt; 0.0331, 0.0145, 0.1431, 0.0653, 0.0354, 0.0155,…\n$ pendiente_2            &lt;dbl&gt; 2.660772, 2.331190, 11.503215, 10.498392, 2.845…\n\n\nLa función summary() es parte de las funciones base de R y es particularmente útil cuando tenemos datos continuos, ya que nos muestra, para cada columna, los valores mínimos, máximos, promedio, mediana y el 1er y 3er quartil.\n\nsummary(excel_clean)\n\n numero_de_muestra  numero_de_experimento  tratamiento     temperatura   \n Length:405         Min.   :1.000         Min.   :18.00   Min.   :18.00  \n Class :character   1st Qu.:2.000         1st Qu.:24.00   1st Qu.:18.00  \n Mode  :character   Median :3.000         Median :24.00   Median :18.00  \n                    Mean   :2.528         Mean   :26.04   Mean   :24.74  \n                    3rd Qu.:4.000         3rd Qu.:30.00   3rd Qu.:32.00  \n                    Max.   :4.000         Max.   :32.00   Max.   :32.00  \n                                                                         \n peso_humedo_g       buffer_ml      volumen_de_reaccion_ul concentracion_g_ml\n Min.   :0.02900   Min.   :0.2900   Min.   :10.00          Min.   :0.1       \n 1st Qu.:0.06700   1st Qu.:0.6700   1st Qu.:10.00          1st Qu.:0.1       \n Median :0.08500   Median :0.8500   Median :20.00          Median :0.1       \n Mean   :0.08387   Mean   :0.8387   Mean   :15.04          Mean   :0.1       \n 3rd Qu.:0.09900   3rd Qu.:0.9900   3rd Qu.:20.00          3rd Qu.:0.1       \n Max.   :0.18900   Max.   :1.8900   Max.   :20.00          Max.   :0.1       \n                                                                             \n   pendiente        pendiente_2    \n Min.   :0.00000   Min.   : 0.000  \n 1st Qu.:0.01480   1st Qu.: 1.632  \n Median :0.03500   Median : 4.594  \n Mean   :0.04949   Mean   : 5.205  \n 3rd Qu.:0.07290   3rd Qu.: 8.163  \n Max.   :0.31390   Max.   :25.233  \n                   NA's   :13      \n\n\nOtra herramienta un poco mas sofisticada pero bastante útil es la función gt_plt_summary() del paquete gtExtras, la cual nos permite gráficar cada una de las variables, nos muestra los valores promedio, mediana y desvicación, y ádemas nos muestra el % de valores faltantes (missing).\nPara utilizar esta herramienta, primero necesitamos instalar el paquete gtExtras y posteriormente cargar la librería.\n\ninstall.packages(\"gtExtras\")\n\n\nlibrary(gtExtras)\n\nWarning: package 'gtExtras' was built under R version 4.3.1\n\ngt_plt_summary(excel_clean)\n\nWarning: Computation failed in `stat_bin()`\nCaused by error in `bin_breaks_width()`:\n! The number of histogram bins must be less than 1,000,000.\nℹ Did you make `binwidth` too small?\n\n\n\n\n\n\n  \n    \n      excel_clean\n    \n    \n      405 rows x 10 cols\n    \n    \n      \n      Column\n      Plot Overview\n      Missing\n      Mean\n      Median\n      SD\n    \n  \n  \n    \nnumero_de_muestra\n                  96 categories\n0.0%\n—\n—\n—\n    \nnumero_de_experimento\n                  14\n0.0%\n2.5\n3.0\n1.1\n    \ntratamiento\n                  1832\n0.0%\n26.0\n24.0\n5.4\n    \ntemperatura\n                  1832\n0.0%\n24.7\n18.0\n7.0\n    \npeso_humedo_g\n                  0.030.19\n0.0%\n0.1\n0.1\n0.0\n    \nbuffer_ml\n                  0.31.9\n0.0%\n0.8\n0.8\n0.3\n    \nvolumen_de_reaccion_ul\n                  1020\n0.0%\n15.0\n20.0\n5.0\n    \nconcentracion_g_ml\n                  00\n0.0%\n0.1\n0.1\n0.0\n    \npendiente\n                  0.000.31\n0.0%\n0.0\n0.0\n0.0\n    \npendiente_2\n                  025\n3.2%\n5.2\n4.6\n4.2"
  },
  {
    "objectID": "3_Data_import.html#exportar-datos",
    "href": "3_Data_import.html#exportar-datos",
    "title": "Importar y limpiar archivos",
    "section": "",
    "text": "Una vez terminado nuestro análisis debemos guardarlo. Siguiendo la recomendación que vimos anteriormente, lo ideal es guardar los datos ya procesados (ya sea que se haya realizado algún tipo de filtrado o transformación) en una carpeta diferente a la carpeta donde están los datos crudos, los cuales se recomienda que se preserven sin alteraciones.\nPodemos crear una nueva carpeta con Archivos &gt; Nuevo directorio o desde la línea de comando usando la función dir.create()\n\ndir.create(\"resultados/tablas\", recursive = TRUE)\n\nWarning in dir.create(\"resultados/tablas\", recursive = TRUE):\n'resultados\\tablas' already exists\n\n\nPara guardar nuestros datos, las funciones que utilizaremos mas frecuentemente son write.table y write_csv()\nPor ejemplo, vamos a tomar las primeras filas de nuestro objeto excel_clean con la función head()\n\nexcel_subset &lt;- head(excel_clean)\nexcel_subset\n\n# A tibble: 6 × 10\n  numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n  &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1 Hf100U                                3          24          18         0.093\n2 Hf100U                                3          24          18         0.093\n3 Hf100U                                3          24          32         0.093\n4 Hf100U                                3          24          32         0.093\n5 Hf101U                                3          30          18         0.114\n6 Hf101U                                3          30          18         0.114\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente &lt;dbl&gt;, pendiente_2 &lt;dbl&gt;\n\n\nAhora lo guardamos en la carpeta que acabamos de crear usando la función write_csv()\n\nwrite_csv(excel_subset, file = here(\"resultados/tablas/\", \"excel_subset.csv\"))\n\no con write.table() la cual nos permite usar una mayor diversidad de formatos\n\nwrite.table(excel_subset, file = here(\"resultados/tablas/\", \"excel_subset.txt\"), sep = \"\\t\")"
  }
]