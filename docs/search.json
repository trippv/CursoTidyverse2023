[
  {
    "objectID": "part_2_eda.html",
    "href": "part_2_eda.html",
    "title": "Part I",
    "section": "",
    "text": "Page with R code\n\n\n\nThis page contains an example template for a lab session, where R code and results are displayed here.\nYou can find more information on how to include code in Quarto website here.\nYou can experiment with code-fold and code-tools in the yaml header above to change how the code cells look like."
  },
  {
    "objectID": "part_2_eda.html#a-cancer-modeling-example",
    "href": "part_2_eda.html#a-cancer-modeling-example",
    "title": "Part I",
    "section": "A Cancer Modeling Example",
    "text": "A Cancer Modeling Example\nExercise on analysis of miRNA, mRNA and protein data from the paper Aure et al, Integrated analysis reveals microRNA networks coordinately expressed with key proteins in breast cancer, Genome Medicine, 2015.\nPlease run the code provided to replicate some of the analyses. Make sure you can explain what all the analysis steps do and that you understand all the results.\nIn addition, there are some extra tasks (Task 1), where no R code is provided. Please do these tasks when you have time available at the end of the lab.\n\nLoad the data\nRead the data, and convert to matrix format.\n\nmrna &lt;- read.table(\"data/data_example.txt\", header=T, sep=\"\\t\", dec=\".\")\n\n# Convert to matrix format\n\nmrna &lt;- as.matrix(mrna)\n\nPrint the data\n\nmrna[1:4, 1:4]\n\n      OSL2R.3002T4 OSL2R.3005T1 OSL2R.3013T1 OSL2R.3030T2\nACACA      1.60034     -0.49087     -0.26553     -0.27857\nANXA1     -2.42501     -0.05416     -0.46478     -2.18393\nAR         0.39615     -0.43348     -0.10232      0.58299\nBAK1       0.78627      0.39897      0.22598     -1.31202\n\n\nVisualise the overall distribution of expression levels by histogram\n\nhist(mrna, nclass=40, xlim=c(-5,5), col=\"lightblue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nThis is a callout-note, and it can be quite useful for exercises. You can find more about callout here.\nExample: Extend the above analysis to cover all genes."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Análisis de datos con Tidyverse",
    "section": "",
    "text": "Lugar: Centro de Investigaciones Biológicas del Noroeste, S.C.\nInstructores: Miguel A. Tripp Valdez\nTidyverse es un conjunto de paquetes dentro del ambiente R que comparten una misma filosofía y gramática lo que facilita la organización, transformación y visualización de datos tabulares."
  },
  {
    "objectID": "index.html#temario-del-curso",
    "href": "index.html#temario-del-curso",
    "title": "Análisis de datos con Tidyverse",
    "section": "Temario del curso",
    "text": "Temario del curso\n\n\n\n\n\n\n\n\nDía\nHora\nTema\n\n\n\n\nLunes\n10:00 - 14:00\nIntroducción\n\nIntroducción a R y Tidyverse\nFamiliarización con el IDE Rstudio\nCreación y organización de proyectos con Rstudio\nImportar y exportar datos\nTibbles\nUso de Posit Cloud\n\n\n\nMartes\n10:00 - 14:00\nManipulación de datos con Dplyr\n\nselect()\nfilter()\nmutate()\npipes %&gt;%\nOperaciones agrupadas group_by()\nsummarise()\n\n\n\nMiércoles\n10:00 - 14:00\nVisualización de datos con ggplot\n\nGramática de las gráficas\nGeoms y aestethics\n\n\n\nJueves\n10::00 - 14:00\nVisualización de datos con ggplot\n\nEdición (temas, etiquetas, paletas de colores)\nggplot sin código\n\n\n\nViernes\n10:00 - 14:00\nManipulación de tablas\n\nPivot\nUnión de tablas\nTransformaciones por columnas (across())\n\nAnálisis de series de tiempo\n\nLubridate"
  },
  {
    "objectID": "9_Union.html",
    "href": "9_Union.html",
    "title": "Manipulación de tablas",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nDiferenciar entre tipos de estructuras datos tabulares.\nUnir dos o mas tablas a partir de una variable relacional.\nUnir o separar elementos de una misma variable."
  },
  {
    "objectID": "9_Union.html#pivot_longer",
    "href": "9_Union.html#pivot_longer",
    "title": "Manipulación de tablas",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nLa tabla4a muestra una situación muy común en la que las columnas no son nombres de variables; es decir, las columnas 1999 y 2000representan valores de la variable año, y los valores en las columas 1999y 2000representan valores de la variable casos. Cada fila representa dos observaciones y no una.\n\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\nPara ajustar este set de datos a un formato mas adecuado, necesitamos tres parámetros:\n\nEl set de columnas cuyo nombre son valores y no variables; en este caso, las columnas son 1999y 2000.\nEl nombre de la variable donde se moverán las columnas. En este caso sería year\nEl nombre de la variable de la columna con los valores. En este caso sería cases.\n\n\n\n\n\n\n\ntable4b %&gt;% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"population\")\n\n# A tibble: 6 × 3\n  country     year  population\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 Afghanistan 1999    19987071\n2 Afghanistan 2000    20595360\n3 Brazil      1999   172006362\n4 Brazil      2000   174504898\n5 China       1999  1272915272\n6 China       2000  1280428583\n\n# alternativamente\ntable4a %&gt;% \n  pivot_longer(-country, names_to = \"year\", values_to = \"population\")\n\n# A tibble: 6 × 3\n  country     year  population\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 Afghanistan 1999         745\n2 Afghanistan 2000        2666\n3 Brazil      1999       37737\n4 Brazil      2000       80488\n5 China       1999      212258\n6 China       2000      213766"
  },
  {
    "objectID": "9_Union.html#pivot_wider",
    "href": "9_Union.html#pivot_wider",
    "title": "Manipulación de tablas",
    "section": "pivot_wider()",
    "text": "pivot_wider()\npivot_wider() es lo opuesto de pivot_longer(). Se utiliza cuando las observaciones están dispersas en varias filas. table2 constituye un ejemplo de esto: una observación es un país en un año, pero cada observación esta dispersa en dos filas.\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\nPara ajustar la tabla2, necesitamos solo dos parámetros:\n\nLa columna de donde se obtendrá el nombre de las variables. En este caso es type\nLa columna de donde se obtendrán los valores. En este caso es count.\n\n\n\n\n\n\n\ntable2 %&gt;%\n    pivot_wider(names_from = type, values_from = count)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\n\n\n\nEjercicio: Respiración\n\n\n\nEn el siguiente enlace puedes encontrar datos de consumo de oxígeno de diversos organismos expuestos a dos condiciones experimentales (“Control” y “Experimental”). Abre el archivo y modifica la tabla para que puedas calcular el promedio diario del consumo de oxígeno y graficalo.\n\n\n\nver codigo\nrespiracion &lt;- read_csv(\"https://raw.githubusercontent.com/trippv/Miguel_Tripp/master/respiracion.csv\")\n\nrespiracion %&gt;%  \n  pivot_longer(c(-individuo, -experimento), names_to = \"dia\", values_to = \"respiracion\") %&gt;%  \n  group_by(experimento, dia) %&gt;% \n  summarise(respiracion_promedio = mean(respiracion, \n                                        na.rm = TRUE)) %&gt;%  \n  ungroup() |&gt; \n  ggplot(aes(x = dia, \n             y = respiracion_promedio, \n             group = experimento, \n             color = experimento))+\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPara importar una base de datos que se encuentra en un sitio remoto, simplemente puedes ingresar la ruta (http:www//…) entre comillas dentro de la función para importar los datos (p. ej read_csv()).\n\nwww &lt;- \"https://raw.githubusercontent.com/trippv/Miguel_Tripp/master/respiracion.csv\"\n\ndf &lt;- read_csv(www)"
  },
  {
    "objectID": "9_Union.html#left_join",
    "href": "9_Union.html#left_join",
    "title": "Manipulación de tablas",
    "section": "left_join()",
    "text": "left_join()\nCuando se utiliza left_join() unión dentro de un pipe, la tabla que ingresamos desde arriba esta del lado derecho, mientras que la tabla que vamos unir esta del lado izquierdo.\nEl argumento by = le dice a la función cual es la variable en común que se va a utilizar en la unión.\n\nband_members %&gt;% \n  left_join(band_instruments, by = \"name\")\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n\nband_instruments %&gt;% \n  left_join(band_members, by = \"name\")\n\n# A tibble: 3 × 3\n  name  plays  band   \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  \n1 John  guitar Beatles\n2 Paul  bass   Beatles\n3 Keith guitar &lt;NA&gt;   \n\n\n\nObserva que cuando no hay coincidencia en alguna de las celdas de la izquierda, se llenara el espacio con NA"
  },
  {
    "objectID": "9_Union.html#rigth_join",
    "href": "9_Union.html#rigth_join",
    "title": "Manipulación de tablas",
    "section": "rigth_join()",
    "text": "rigth_join()\nCuando se utiliza rigth_join() unión dentro de un pipe, la tabla que ingresamos desde arriba esta del lado izquierdo, mientras que la tabla que vamos unir esta del lado derecho.\n\nband_members %&gt;% \n  right_join(band_instruments, by = \"name\")\n\n# A tibble: 3 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "9_Union.html#full_join",
    "href": "9_Union.html#full_join",
    "title": "Manipulación de tablas",
    "section": "full_join()",
    "text": "full_join()\nfull_join() retiene todas las filas en ambas tablas e inserta NAcuando existan registros faltantes que alguna de ellas.\nthe full_join functions retains all rows of both input data sets and inserts NA when an ID is missing in one of the data frames.\n\nband_members %&gt;% \n  full_join(band_instruments, by = \"name\")\n\n# A tibble: 4 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 Mick  Stones  &lt;NA&gt;  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith &lt;NA&gt;    guitar"
  },
  {
    "objectID": "9_Union.html#inner_join",
    "href": "9_Union.html#inner_join",
    "title": "Manipulación de tablas",
    "section": "inner_join()",
    "text": "inner_join()\n\nband_members %&gt;% \n  inner_join(band_instruments , by = \"name\")\n\n# A tibble: 2 × 3\n  name  band    plays \n  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n\n\n\n\n\n\n\n\nWarning\n\n\n\nEs importante que estes conciente de la función que vas a utilizar y cual es el objetivo, ya que inner_join()podria resultar en la perdida inadvertida de información."
  },
  {
    "objectID": "7_VisualizationGgplot2.html",
    "href": "7_VisualizationGgplot2.html",
    "title": "Visualización con ggplot2; Edición",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nModificar aspectos visuales como color, forma, transparencia, etc.\nGenerar paneles para dividir subconjuntos de datos.\nModificar el tema general de una gráfica.\nModificar etiquetas y leyendas.\nExportar una gráfica en distintos formatos."
  },
  {
    "objectID": "7_VisualizationGgplot2.html#ajuste-manual-global",
    "href": "7_VisualizationGgplot2.html#ajuste-manual-global",
    "title": "Visualización con ggplot2; Edición",
    "section": "Ajuste manual global",
    "text": "Ajuste manual global\nDentro de los aes podemos asignar un color diferente a cada grupo, pero también es posible asignar un color arbitrario a todas los geoms. Para esto, tenemos que establecer el color afuera del aes().\npor ejemplo\n\nlibrary(tidyverse)\n\n#abrir la base de datos de pingüinos\npenguins &lt;- read_csv(\"data/palmer_penguins.csv\") |&gt; \n  na.omit()\n\n\nggplot(data = penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g), \n             color = \"darkblue\")\n\n\n\n\n\n\n\n\nDe la misma manera, podemos ajustar la transparencia (alpha) o la forma (shape) para todos los puntos u otro geom al establecer este parámetro afuera del aes()\n\nggplot(data = penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g), \n             shape = 15)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEstilos de puntos disponibles\n\n\n\nA continuación se muestran los tipos de figuras disponibles para gráficos de puntos (p. ej. geom_point(). Para modificar el punto se usa el parámetro shape = nn)\n\n\n\n\n\n\n\n\n\n\nNota que los puntos del 21 al 25 son simbolos abiertos por lo que pueden ser rellenados por un color (fill)."
  },
  {
    "objectID": "7_VisualizationGgplot2.html#ajuste-manual-por-grupo",
    "href": "7_VisualizationGgplot2.html#ajuste-manual-por-grupo",
    "title": "Visualización con ggplot2; Edición",
    "section": "Ajuste manual por grupo",
    "text": "Ajuste manual por grupo\nEn ejemplos anteriores, donde usamos el argumento color dentro de los aes() ggplot2 asigna una paleta de colores default. Si queremos asignar colores específicos, podemos añadirlos manualmente usando las funciones:\n\nscale_color_manual()\nscale_fill_manual()\n\n\npp &lt;- ggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species))\n\n# ajustamos el color con scale_color_manual()\npp +\n  scale_color_manual(values = c(\"grey55\", \"orange\", \"lightblue\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nDado que se requiere un vector con los colores que se deseen utilizar, es posible hacer un objeto con un vector de colores y utilizarlo de forma recurrente en distintas figuras. Por ejemplo\n\n# crear un vector con colores\ncolores &lt;- c(\"grey55\", \"orange\", \"lightblue\")\n\n# incluir el vector dentra de la función\npp +\n  scale_color_manual(values = colores)"
  },
  {
    "objectID": "7_VisualizationGgplot2.html#ajuste-manual-de-gradientes",
    "href": "7_VisualizationGgplot2.html#ajuste-manual-de-gradientes",
    "title": "Visualización con ggplot2; Edición",
    "section": "Ajuste manual de gradientes",
    "text": "Ajuste manual de gradientes\nTambién es posible hacer ajuste manual de gradientes de color utilizando la función scale_color_gradient()\nPor ejemplo, podemos gráficar la relación entre la longitud del pico y el peso corporal, con un gradiente de color por el peso corporal\n\npp2 &lt;- ggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, \n                 color = body_mass_g))\npp2\n\n\n\n\n\n\n\n# ajustar manualmente el gradiente\npp2 +\n  scale_color_gradient(low = \"blue\", high = \"red\")"
  },
  {
    "objectID": "7_VisualizationGgplot2.html#seleccionar-una-nueva-paleta-de-colores",
    "href": "7_VisualizationGgplot2.html#seleccionar-una-nueva-paleta-de-colores",
    "title": "Visualización con ggplot2; Edición",
    "section": "Seleccionar una nueva paleta de colores",
    "text": "Seleccionar una nueva paleta de colores\nEscoger los colores adecuados para una figura es mas complejo de lo que pudiera parecer y hay varios aspectos que se deben considerar. Puedes encontrar algunas recomendaciones aquí.\nAfortunadamente, es posible encontrar diversas paletas prediseñadas, ya sea para datos categóricos, divergentes o secuenciales. Entre las mas comunes están los paquetes:\n\nRColorBrewer\nViridis\n\n\nRColorBrewer\n\n\n\n\n\nPaleta de colores de RColorBrewer\n\n\n\n\n\n\nviridis\n\nHay varias opciones de como usar estas paletas de colores:\n\nGenerar un vector con los colores de una paleta en especifico. Esto es mas útil para variables discretas\n\n\nlibrary(RColorBrewer)\nlibrary(viridis)\n\npaleta_brewer &lt;- brewer.pal(name = \"Dark2\", n = 3)\npaleta_virids &lt;- viridis(n = 3)\n\n# usar paleta de RColorBrewer\npp +\n  scale_color_manual(values = paleta_brewer)\n\n\n\n\n\n\n\n# Usar paletta de Viridis\npp + \n  scale_color_manual(values = paleta_virids)\n\n\n\n\n\n\n\n\n\nUtilizar alguna de las funciones de cada paquete dentro de la figura. Por ejemplo scale_color_brewer() o scale_color_viridids()\n\n\n# usar RColorBrewer\npp +\n  scale_color_brewer(palette = \"Dark2\")\n\n\n\n\n\n\n\n# usar Viridis\npp +\n  scale_color_viridis(discrete = TRUE,option = \"viridis\")\n\n\n\n\n\n\n\n\nPara gradientes\n\npp2 +\n  scale_color_distiller(palette = 5)\n\n\n\n\n\n\n\npp2 +\n  scale_colour_viridis_c(option = \"magma\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n¿Quieres mas colores?\n\n\n\nExisten numerosas opciones en línea para escoger colores y paletas de colores. Una herramienta básica es el Selector de color de Google que te permite generar el código HEX de un color en específico, o la herramienta R Color Palettes que te permite generar un vector con una paleta de colores.\n\n\n\n\n\n\n\n\nEjercicio: Colores y formas\n\n\n\n\nAbre la tabla de pokemon que se encuentra en la carpeta de data y genera:\n\nUn gráfico de dispersión de los valores de ataque (attack) y defensa (defense) cambiando el color y la forma de acuerdo a si es legendario o no. Elige los colores y formas que gustes.\nCalcula el promedio de porcentaje de machos (percentage_male) por tipo de pokemon (type1) y genera una gráfica de barras con los valores promedio y con el colores de las barras en función del valor promedio. Cambia la paleta de colores a una de tu preferencia\n\n\n\nver codigo\npokemon &lt;- read_csv(\"data/pokemon.csv\")\n\n# Ejercicio e1\npokemon %&gt;% \n  janitor::clean_names() %&gt;% \n  mutate(generation = factor(generation)) %&gt;% \n  mutate(is_legendary = factor(is_legendary)) %&gt;% \n  ggplot(aes(x = attack, y = defense, \n             color = is_legendary, \n             shape = is_legendary)) +\n  geom_point()+\n  geom_smooth(method = \"lm\")+\n  scale_color_brewer(palette = \"Set1\") +\n  scale_shape_manual(values = c(1,15))\n\n\n# Ejercicio e2\npokemon %&gt;% \n  group_by(type1) %&gt;% \n  summarise(mean_male_pct = mean(percentage_male, na.rm = TRUE)) %&gt;% \n  ggplot(aes(x = type1, y = mean_male_pct, fill = mean_male_pct))+\n  geom_col()+\n  scale_fill_viridis_c()"
  },
  {
    "objectID": "7_VisualizationGgplot2.html#facet_wrap",
    "href": "7_VisualizationGgplot2.html#facet_wrap",
    "title": "Visualización con ggplot2; Edición",
    "section": "facet_wrap()",
    "text": "facet_wrap()\nfacet_wrap() genera un listón de paneles de una variable determinada y las envuelve en un orden bidimensional. Es útil cuando se tiene una sola variable con varios niveles.\nVamos a utilizar nuestro objeto ppque generamos mas arriba y vamos a separar los registros de los pingüinos por sexo:\n\nggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + \n  facet_wrap(~ sex)\n\n\n\n\n\n\n\n\no por isla\n\nggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + \n  facet_wrap(~ island)\n\n\n\n\n\n\n\n\nPodemos controlar la orientación de los paneles con ncol y nrow\n\nggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  facet_wrap(~ island, ncol = 1)"
  },
  {
    "objectID": "7_VisualizationGgplot2.html#facet_grid",
    "href": "7_VisualizationGgplot2.html#facet_grid",
    "title": "Visualización con ggplot2; Edición",
    "section": "facet_grid()",
    "text": "facet_grid()\nfacet_grid() despliega el gráfico en una gradilla de dos dimensiones definido por la formula x ~ y, en donde x se despliega en columnas y y en las filas. Usualmente se recomienda colocar la variable con el mayor número de niveles en las columnas, aunque esto dependerá del área de trazado.\nPor ejemplo, usando la base de datos de penguins vamos a graficar la relación de longitud de pico y peso corporal por sexo y por isla.\n\nggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  facet_grid(sex ~ island)"
  },
  {
    "objectID": "7_VisualizationGgplot2.html#ajustar-las-escalas",
    "href": "7_VisualizationGgplot2.html#ajustar-las-escalas",
    "title": "Visualización con ggplot2; Edición",
    "section": "Ajustar las escalas",
    "text": "Ajustar las escalas\nTanto para facet_wrap() como facet_grid()es posible ajustar las escalas en los ejes de manera que sea el mismo para todos los paneles (fixed) o que pueda variar entre los paneles (free) utilizando los parámetros:\n\nscales= \"fixed\": Las escalas en el eje x y y esta fijas en todos los paneles.\nscales = \"free_x\": La escala en el eje x es variable y fija en el eje y.\nscales = \"free_y\": La escala en el eje y es variable y fija en el eje x.\nscales = \"free\": Las escalas de ambos ejes son variables\n\n\nggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + \n  facet_wrap(~ island, scales = \"free_y\")\n\n\n\n\n\n\n\n\n\nggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + \n  facet_wrap(~ island, scale = \"free_x\")\n\n\n\n\n\n\n\n\n\nggplot(penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species)) + \n  facet_wrap(~ island, scales = \"free\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nLas escalas fijas facilitan visualizar patrones entre los paneles; las escalas variables facilitan ver patrones dentro de cada panel\n\n\n\n\n\n\n\n\nDesafio paneles\n\n\n\n\nRecrea la siguiente figura:\n\n\nver codigo\npenguins_noisland &lt;- penguins %&gt;% \n  select(-island)\n\nggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g))+\n  geom_point(data = penguins_noisland, color = \"grey75\")+\n  geom_point(aes(color = island))+\n  facet_wrap(~island) \n\n\n\n\n\n\n\n\n\n\nTip1: Tienes que utilizar dos geom_points(); una con la base de datos original y una transformada.\nTip2: Presta atención en donde pones el parámetro color para cada geom."
  },
  {
    "objectID": "7_VisualizationGgplot2.html#themes-prediseñados",
    "href": "7_VisualizationGgplot2.html#themes-prediseñados",
    "title": "Visualización con ggplot2; Edición",
    "section": "Themes prediseñados",
    "text": "Themes prediseñados\nggplot2 viene con diversos temas (themes) prediseñados con diferencias en cuanto a los colores de fondo, el uso de retícula, borde exterior, etc.\nPara usar cualquiera de estos temas en nuestras gráfica simplemente agregamos la capa + theme_xx().\nAlgunas de las opciones son las siguientes:\n\n\n\n\n\n\n\n\n\n\n\n(a) grey\n\n\n\n\n\n\n\n\n\n\n\n(b) classic\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) bw\n\n\n\n\n\n\n\n\n\n\n\n(d) light\n\n\n\n\n\n\n\n\n\n\n\n\n\n(e) minimal\n\n\n\n\n\n\n\n\n\n\n\n(f) void\n\n\n\n\n\n\n\nFigure 2: Algunos ejemplos de los diferentes themes prediseñados"
  },
  {
    "objectID": "7_VisualizationGgplot2.html#modificar-componentes-del-tema",
    "href": "7_VisualizationGgplot2.html#modificar-componentes-del-tema",
    "title": "Visualización con ggplot2; Edición",
    "section": "Modificar componentes del tema",
    "text": "Modificar componentes del tema\nSi quieres modificar un componente del tema, puedes usar la función theme() con una estructura como se muestra:\nplot + theme(element.name = element.function())\nEste cambio puntual de un elemento anulará los ajustes preestablecido en algunos de los themes que vimos anteriormente.\nPor ejemplo, si queremos utilizar un theme_minimal() pero quieres eliminar los grids secundarios, podemos utilizar el siguiente codigo:\n\npp + \n  theme_minimal()+\n  theme(panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\nO si queremos cambiar la posición de la legenda, podemos utilizar el parametro legend_position=\n\npp +\n  theme_minimal()+\n  theme(panel.grid.minor = element_blank(),\n        legend.position = \"top\")\n\n\n\n\n\n\n\n\nHay cuatro tipos básicos de funciones de elementos incorporados: texto, líneas, rectángulos y en blanco (blank). Cada función de elemento tiene un conjunto de parámetros que controlan la apariencia:\n\nelement_text() controla el tamaño, color, tipo de fuente y posición de los elementos de texto, como titulos, ejes, leyendas, etc.\n\n\npp + \n  theme(axis.title = element_text(size = 16, color = \"red\"))\n\n\n\n\n\n\n\n\n\nelement_line() controla el estilo y tamaño de las líneas dentro del área de trazado\n\n\npp +\n  theme(panel.grid = element_line(linetype = \"dashed\", color = \"red\"))\n\n\n\n\n\n\n\n\n\n|element_rect()dibuja y controla el estilo de rectángulos, principalmente para colores de fondo.\n\n\npp +\n  theme(panel.background = element_rect(fill = \"lightblue\", color = \"red\"))\n\n\n\n\n\n\n\n\n\nelement_blank()dibuja nada! Sin embargo, es un elemento que se utiliza muy a menudo para suprimir algún elemento no deseado, como por ejemplo los grids o marcas del eje.\n\n\npp +\n  theme(panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\nOtro elemento importante es el control de la posición de la leyenda. Por default, ggplot2 coloca la leyenda a la derecha del gráfico, pero podemos ajustar la posición con el parámetro legend.position = nn donde podemos usar los argumentos \"left\", \"right\", \"top\", \"bottom\" y \"none\".\npp +\n  theme(legend.position = \"top\")\npp + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\nRealmente existen muchos elementos que podemos controlar dentro de la función theme() que nos llevaria todo el día revisarlo, pero con los argumentos que vimos anteriormente puedes hacer los principales ajustes de desees. En la siguiente imagen se muestran los principales elementos que puedes modificar:\n\n\n\nEleméntos gráficos que se pueden modificar dentro de la función theme()"
  },
  {
    "objectID": "5_DataWrangling.html",
    "href": "5_DataWrangling.html",
    "title": "Manipulación de datos",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nFiltrar y manipular valores de datos tabulares.\nRealizar operaciones agrupadas.\nManejar pipes para unir cadena de operaciones en un data.frame.\nFiltrar y manipular datos faltantes (NA)."
  },
  {
    "objectID": "5_DataWrangling.html#seleccionar-variables-con-un-patrón",
    "href": "5_DataWrangling.html#seleccionar-variables-con-un-patrón",
    "title": "Manipulación de datos",
    "section": "Seleccionar variables con un patrón",
    "text": "Seleccionar variables con un patrón\nEstas funcionen ayudad a seleccionar variables según un patrón determinado\n\nstarts_with(): Inicia con un prefijo exacto\nends_with(): Finaliza con un sufijo exacto\ncontains(): Contiene una cadena literal\n\nPor ejemplo, podemos seleccionar las columnas de Sp attack y Sp deffense utilizando el prefijo sp\n\nselect(pokemon, name, starts_with(\"sp_\"))\n\n# A tibble: 801 × 3\n   name       sp_attack sp_defense\n   &lt;chr&gt;          &lt;dbl&gt;      &lt;dbl&gt;\n 1 Bulbasaur         65         65\n 2 Ivysaur           80         80\n 3 Venusaur         122        120\n 4 Charmander        60         50\n 5 Charmeleon        80         65\n 6 Charizard        159        115\n 7 Squirtle          50         64\n 8 Wartortle         65         80\n 9 Blastoise        135        115\n10 Caterpie          20         20\n# ℹ 791 more rows\n\n\nO podemos seleccionar las variables relacionadas con ataque (attack)\n\nselect(pokemon, name, contains(\"attack\"))\n\n# A tibble: 801 × 3\n   name       attack sp_attack\n   &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n 1 Bulbasaur      49        65\n 2 Ivysaur        62        80\n 3 Venusaur      100       122\n 4 Charmander     52        60\n 5 Charmeleon     64        80\n 6 Charizard     104       159\n 7 Squirtle       48        50\n 8 Wartortle      63        65\n 9 Blastoise     103       135\n10 Caterpie       30        20\n# ℹ 791 more rows"
  },
  {
    "objectID": "5_DataWrangling.html#filtrar-variables-en-un-intervalo-con-between",
    "href": "5_DataWrangling.html#filtrar-variables-en-un-intervalo-con-between",
    "title": "Manipulación de datos",
    "section": "Filtrar variables en un intervalo con between()",
    "text": "Filtrar variables en un intervalo con between()\nEs posible filtrar un intervalo de valores utilizando la función between(). Esta función requiere como argumentos el nombre de la variable que queremos filtrar, el límite inferior y el límite superior.\nPor ejemplo, si queremos filtrar los pokemon que tengan un nivel de ataque (attack) mayor a 100 pero menor a 150\n\nfilter(pokemon, between(attack, 100, 150))\n\n# A tibble: 191 × 13\n   pokedex_number name      attack defense    hp percentage_male sp_attack\n            &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1              3 Venusaur     100     123    80            88.1       122\n 2              6 Charizard    104      78    78            88.1       159\n 3              9 Blastoise    103     120    79            88.1       135\n 4             15 Beedrill     150      40    65            50          15\n 5             28 Sandslash    100     120    75            50          25\n 6             34 Nidoking     102      77    81           100          85\n 7             51 Dugtrio      100      60    35            50          50\n 8             57 Primeape     105      60    65            50          60\n 9             59 Arcanine     110      80    90            75.4       100\n10             67 Machoke      100      70    80            75.4        50\n# ℹ 181 more rows\n# ℹ 6 more variables: sp_defense &lt;dbl&gt;, speed &lt;dbl&gt;, type1 &lt;chr&gt;,\n#   weight_kg &lt;dbl&gt;, generation &lt;dbl&gt;, is_legendary &lt;dbl&gt;\n\n\nPodemos usar la operación opuesta utilizando el operado !\n\nfilter(pokemon, !between(attack, 100, 150))\n\n# A tibble: 610 × 13\n   pokedex_number name       attack defense    hp percentage_male sp_attack\n            &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1              1 Bulbasaur      49      49    45            88.1        65\n 2              2 Ivysaur        62      63    60            88.1        80\n 3              4 Charmander     52      43    39            88.1        60\n 4              5 Charmeleon     64      58    58            88.1        80\n 5              7 Squirtle       48      65    44            88.1        50\n 6              8 Wartortle      63      80    59            88.1        65\n 7             10 Caterpie       30      35    45            50          20\n 8             11 Metapod        20      55    50            50          25\n 9             12 Butterfree     45      50    60            50          90\n10             13 Weedle         35      50    40            50          20\n# ℹ 600 more rows\n# ℹ 6 more variables: sp_defense &lt;dbl&gt;, speed &lt;dbl&gt;, type1 &lt;chr&gt;,\n#   weight_kg &lt;dbl&gt;, generation &lt;dbl&gt;, is_legendary &lt;dbl&gt;\n\n\n\n\n\n\n\n\nEjercicio: ¿¡QUIEN ES ESE POKEMON!? 📣\n\n\n\n\nNuestro pokémon tiene un valor de HP entre 100 y 200; valor de velocidad menor a 50; es del tipo1 Normal; tiene un valor de defensa menor a 40 y pertenece a la primera generación\n\n\nver codigo\nfilter(pokemon, between(hp, 100, 200),\n       speed &lt; 50,\n       type1 == \"normal\",\n       defense &lt; 40,\n       generation == 1)"
  },
  {
    "objectID": "5_DataWrangling.html#filtrar-variables-con-un-patrón-str_detec",
    "href": "5_DataWrangling.html#filtrar-variables-con-un-patrón-str_detec",
    "title": "Manipulación de datos",
    "section": "Filtrar variables con un patrón; str_detec()",
    "text": "Filtrar variables con un patrón; str_detec()\nTambién es posible filtrar una variable a partir de un carácter en especifico usando la función str_detect().\n\nfilter(pokemon, str_detect(name, \"eon\"))\n\n# A tibble: 13 × 13\n   pokedex_number name       attack defense    hp percentage_male sp_attack\n            &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1              5 Charmeleon     64      58    58            88.1        80\n 2            134 Vaporeon       65      60   130            88.1       110\n 3            135 Jolteon        65      60    65            88.1       110\n 4            136 Flareon       130      60    65            88.1        95\n 5            196 Espeon         65      60    65            88.1       130\n 6            197 Umbreon        65     110    95            88.1        60\n 7            352 Kecleon        90      70    60            50          60\n 8            395 Empoleon       86      88    84            88.1       111\n 9            456 Finneon        49      56    49            50          49\n10            457 Lumineon       69      76    69            50          69\n11            470 Leafeon       110     130    65            88.1        60\n12            471 Glaceon        60     110    65            88.1       130\n13            700 Sylveon        65      65    95            88.1       110\n# ℹ 6 more variables: sp_defense &lt;dbl&gt;, speed &lt;dbl&gt;, type1 &lt;chr&gt;,\n#   weight_kg &lt;dbl&gt;, generation &lt;dbl&gt;, is_legendary &lt;dbl&gt;\n\n\nSi buscamos múltiples patrones dentro de nuestra variable con caracteres, podemos separarlas dentro de las comillas usando el símbolo “|”. Por ejemplo, si queremos buscar los Pokemon cuyo nombre termine con “saur” o que empieza con “Char”:\n\nfilter(pokemon, str_detect(name, \"saur|Char\"))\n\n# A tibble: 7 × 13\n  pokedex_number name  attack defense    hp percentage_male sp_attack sp_defense\n           &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1              1 Bulb…     49      49    45            88.1        65         65\n2              2 Ivys…     62      63    60            88.1        80         80\n3              3 Venu…    100     123    80            88.1       122        120\n4              4 Char…     52      43    39            88.1        60         50\n5              5 Char…     64      58    58            88.1        80         65\n6              6 Char…    104      78    78            88.1       159        115\n7            737 Char…     82      95    57            50          55         75\n# ℹ 5 more variables: speed &lt;dbl&gt;, type1 &lt;chr&gt;, weight_kg &lt;dbl&gt;,\n#   generation &lt;dbl&gt;, is_legendary &lt;dbl&gt;\n\n\n\n\n\n\n\n\nEjercicio: Una galaxia muy lejana…\n\n\n\nAbre la tabla starwars que se encuentra en el directorio de databases y genera los siguientes objetos:\n\nUna tabla que incluya solamente el nombre del personaje y todas las variables relacionadas con colores.\nUna tabla que incluya solamente los personajes femeninos del planeta Naboo.\nUna tabla con los personajes que hayan aparecido en Attack of the Clones."
  },
  {
    "objectID": "5_DataWrangling.html#operaciones-agrupadas",
    "href": "5_DataWrangling.html#operaciones-agrupadas",
    "title": "Manipulación de datos",
    "section": "Operaciones agrupadas",
    "text": "Operaciones agrupadas\nConsiderando la base de datos, seria mas informativo obtener el promedio por especie o por isla. La función group_by() permite agrupar los datos de acuerdo a alguna variable (factor).\nPor ejemplo, para obtener el peso promedio por especie:\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(promedio_peso = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   promedio_peso\n  &lt;chr&gt;             &lt;dbl&gt;\n1 Adelie            3701.\n2 Chinstrap         3733.\n3 Gentoo            5076.\n\n\nPodemos agrupar utilizando mas variables separadas por una coma:\n\npenguins %&gt;% \n  group_by(island, species, sex) %&gt;% \n  summarise(promedio_peso = mean(body_mass_g, na.rm = TRUE),\n            desviacion = sd(body_mass_g, na.rm = TRUE),\n            N = n())\n\n`summarise()` has grouped output by 'island', 'species'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 13 × 6\n# Groups:   island, species [5]\n   island    species   sex    promedio_peso desviacion     N\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;      &lt;dbl&gt; &lt;int&gt;\n 1 Biscoe    Adelie    female         3369.       343.    22\n 2 Biscoe    Adelie    male           4050        356.    22\n 3 Biscoe    Gentoo    female         4680.       282.    58\n 4 Biscoe    Gentoo    male           5485.       313.    61\n 5 Biscoe    Gentoo    &lt;NA&gt;           4588.       338.     5\n 6 Dream     Adelie    female         3344.       212.    27\n 7 Dream     Adelie    male           4046.       331.    28\n 8 Dream     Adelie    &lt;NA&gt;           2975         NA      1\n 9 Dream     Chinstrap female         3527.       285.    34\n10 Dream     Chinstrap male           3939.       362.    34\n11 Torgersen Adelie    female         3396.       259.    24\n12 Torgersen Adelie    male           4035.       372.    23\n13 Torgersen Adelie    &lt;NA&gt;           3681.       413.     5\n\n\nExisten otras funciones útiles por las que nos podría interesar agrupar\n\ncount()\nmean()\nmedian()\nmin()\nmax()\nquantile(x, 0.25)\nIQR()\n\nEl uso de la función group_by() también nos permite transformar una variable e incluirla en una columna en conjunto con la función mutate()\n\npenguins %&gt;% \n  group_by(species, island,sex) %&gt;% \n  mutate(promedio_peso_grupo = mean(body_mass_g, na.rm = TRUE)) %&gt;% \n  select(promedio_peso_grupo, everything())\n\n# A tibble: 344 × 9\n# Groups:   species, island, sex [13]\n   promedio_peso_grupo species island    bill_length_mm bill_depth_mm\n                 &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;\n 1               4035. Adelie  Torgersen           39.1          18.7\n 2               3396. Adelie  Torgersen           39.5          17.4\n 3               3396. Adelie  Torgersen           40.3          18  \n 4               3681. Adelie  Torgersen           NA            NA  \n 5               3396. Adelie  Torgersen           36.7          19.3\n 6               4035. Adelie  Torgersen           39.3          20.6\n 7               3396. Adelie  Torgersen           38.9          17.8\n 8               4035. Adelie  Torgersen           39.2          19.6\n 9               3681. Adelie  Torgersen           34.1          18.1\n10               3681. Adelie  Torgersen           42            20.2\n# ℹ 334 more rows\n# ℹ 4 more variables: flipper_length_mm &lt;dbl&gt;, body_mass_g &lt;dbl&gt;, sex &lt;chr&gt;,\n#   year &lt;dbl&gt;"
  },
  {
    "objectID": "5_DataWrangling.html#resumir-todas-las-variables-con-summarise_all",
    "href": "5_DataWrangling.html#resumir-todas-las-variables-con-summarise_all",
    "title": "Manipulación de datos",
    "section": "Resumir todas las variables con summarise_all()",
    "text": "Resumir todas las variables con summarise_all()\nLa función summarise_all() requiere una función como argumento, la cual aplica a todas las columnas de la tabla. En este ejemplo se agrego el argumento na.rm = TRUE el cual ignora los NAs\n\npenguins %&gt;% \n  group_by(species, island, sex) %&gt;% \n  summarise_all(mean, na.rm = TRUE) \n\n# A tibble: 13 × 8\n# Groups:   species, island [5]\n   species   island    sex    bill_length_mm bill_depth_mm flipper_length_mm\n   &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie    Biscoe    female           37.4          17.7              187.\n 2 Adelie    Biscoe    male             40.6          19.0              190.\n 3 Adelie    Dream     female           36.9          17.6              188.\n 4 Adelie    Dream     male             40.1          18.8              192.\n 5 Adelie    Dream     &lt;NA&gt;             37.5          18.9              179 \n 6 Adelie    Torgersen female           37.6          17.6              188.\n 7 Adelie    Torgersen male             40.6          19.4              195.\n 8 Adelie    Torgersen &lt;NA&gt;             37.9          18.2              187.\n 9 Chinstrap Dream     female           46.6          17.6              192.\n10 Chinstrap Dream     male             51.1          19.3              200.\n11 Gentoo    Biscoe    female           45.6          14.2              213.\n12 Gentoo    Biscoe    male             49.5          15.7              222.\n13 Gentoo    Biscoe    &lt;NA&gt;             45.6          14.6              216.\n# ℹ 2 more variables: body_mass_g &lt;dbl&gt;, year &lt;dbl&gt;"
  },
  {
    "objectID": "5_DataWrangling.html#detectar-valores-faltantes",
    "href": "5_DataWrangling.html#detectar-valores-faltantes",
    "title": "Manipulación de datos",
    "section": "Detectar valores faltantes",
    "text": "Detectar valores faltantes\nPara estos ejercicios utilizaremos nuestra base de pingünos penguins\nPara detectar valores faltantes en nuestra base de datos podemos utilizar herramientas como ìs.na() en conjunto con la función any()\n\nany(is.na(penguins))\n\n[1] TRUE\n\n\nis.na() nos dice cuales valores de nuestra tabla son NA (TRUE) o no (FALSE) mientras que la función any() nos dice si hay algun valor faltante en cualquier punto de la tabla\nLa función summary() también nos puede dar un panorama de cuantos datos faltantes hay en la base de datos.\n\nsummary(penguins)\n\n   species             island          bill_length_mm  bill_depth_mm  \n Length:344         Length:344         Min.   :32.10   Min.   :13.10  \n Class :character   Class :character   1st Qu.:39.23   1st Qu.:15.60  \n Mode  :character   Mode  :character   Median :44.45   Median :17.30  \n                                       Mean   :43.92   Mean   :17.15  \n                                       3rd Qu.:48.50   3rd Qu.:18.70  \n                                       Max.   :59.60   Max.   :21.50  \n                                       NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex                 year     \n Min.   :172.0     Min.   :2700   Length:344         Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   Class :character   1st Qu.:2007  \n Median :197.0     Median :4050   Mode  :character   Median :2008  \n Mean   :200.9     Mean   :4202                      Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                      3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                      Max.   :2009  \n NA's   :2         NA's   :2"
  },
  {
    "objectID": "5_DataWrangling.html#drop_na",
    "href": "5_DataWrangling.html#drop_na",
    "title": "Manipulación de datos",
    "section": "drop_na",
    "text": "drop_na\nLa función drop_na nos permite descartar todas las filas que contengan valores faltantes en alguna de sus columnas.\n\npenguins %&gt;% \n  drop_na() \n\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 323 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\nEsta función también nos permite eliminar los datos faltantes de una columna en especifica. Por ejemplo, si queremos preservar los individuos de los que tenemos el dato del sexo, podemos ejecutar:\n\npenguins %&gt;% \n  drop_na(sex)\n\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 323 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;"
  },
  {
    "objectID": "5_DataWrangling.html#reemplazar-nacon-un-valor-especifico-con-replace_na",
    "href": "5_DataWrangling.html#reemplazar-nacon-un-valor-especifico-con-replace_na",
    "title": "Manipulación de datos",
    "section": "Reemplazar NAcon un valor especifico con replace_na()`",
    "text": "Reemplazar NAcon un valor especifico con replace_na()`\nLa función replace_na() nos permite reemplazar los valores faltantes de una o varias columnas. Como esto implica de transformar una columna, entonces tendremos que anidarla de la función mutate()\n\npenguins %&gt;% \n  mutate(bill_length_mm = replace_na(bill_length_mm, 100))\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen          100            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\nIncluso podemos reemplazar los valores faltantes con el valor promedio.\n\npenguins %&gt;% \n  mutate(bill_length_mm = replace_na(bill_length_mm, mean(bill_length_mm, na.rm = TRUE)))\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           43.9          NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  mutate(bill_length_mm = replace_na(bill_length_mm, mean(bill_length_mm, na.rm = TRUE))) \n\n# A tibble: 344 × 8\n# Groups:   species [3]\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           38.8          NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;"
  },
  {
    "objectID": "3_Proyectos.html",
    "href": "3_Proyectos.html",
    "title": "Proyectos en Rstudio",
    "section": "",
    "text": "Alliston Horts (@allison_horst)\n\n\nIndependientemente de si estás dando tus primeros pasos en R o si ya eres un experto, es frecuente que la primera línea de tu código sea algo como esto:\nsetwd(\"C:\\Users\\miguel\\ruta\\que\\solo\\yo\\tengo\")\nsetwd() toma una ruta absoluta y la establece como el directorio de trabajo activo. El utilizar una ruta absoluta como directorio de trabajo hace que sea difícil de reproducir o de mover ya que otra persona u otro equipo no tiene esa misma ruta absoluta.\n\nProyectos en Rstudio\nLos proyectos de RStudio resuelven el problema de las rutas ‘frágiles’ al hacer que las rutas de archivo sean relativas. El archivo de proyecto de RStudio es un archivo que se encuentra en el directorio raíz, con la extensión .Rproj. Cuando tu sesión de RStudio está siendo ejecutada a través del archivo de proyecto (.Rproj), el directorio de trabajo actual apunta a la carpeta raíz donde se guarda ese archivo .Rproj.\nEste proyecto facilita importar y exportar archivos ya que todos están a la mano a partir de rutas relativas a la carpeta raíz.\n\n\n\n\n\n\nTip\n\n\n\nOtra gran ventaja de los proyectos de Rstudio, es que puedes compartirlo con otra persona manteniendo la estructura de las rutas relativas, de manera que no importa en donde se guarde el proyecto o si esta utilizando otro sistema operativo, las rutas relativas permanecen funcionales siempre y cuando abra la sesión utilizando el proyecto (.Rproj).\n\n\nUn ejemplo de como podemos estructurar un proyecto es el siguiente:\n\n\n\n\n\n\nDatos: Esta es la carpeta en la que se guardan los archivos que necesito leer en R para realizar mi análisis o visualización. Estos pueden ser CSV, TXT, TSV, etc. La idea principal de tener esta carpeta es que estos archivos crudos en ningún momento debería sobrescribir o editar para garantizar la reproducibilidad.\nScript: Aquí es donde puedes guardar los scripts de R y/o archivos RMarkdown o Quarto.\nSalida: En esta carpeta puedes guardar todas tus salidas, incluyendo gráficos, HTML y tablas, etc. Tener esta carpeta de Salida ayuda a otros a identificar qué archivos son resultados del código, en contraste con los archivos fuente que se utilizaron para producir el análisis.\n\n\n\nComo generar un proyecto nuevo\nPara crear un proyecto nuevo sigue estos pasos:\n\nAbre Rstudio y selecciona Archivo -&gt; Nuevo Proyecto\n\n\n\n\n\n\n\nSelecciona Nueva Carpeta si estas empezando el proyecto desde cero o carpeta existente si deseas crear un proyecto dentro de alguna carpeta que ya tengas\n\n\n\n\n\n\n\nDa un nombre a tu proyecto y ¡listo! ya puedes empezar a trabajar.\n\nEl proyecto R que has creado estará en una carpeta que contiene un archivo .Rproj. Este archivo es un acceso directo y probablemente la forma más directa de abrir tu proyecto. También puedes abrir un proyecto seleccionando “Open Project” en el menú File. Alternativamente, en el extremo superior derecho de RStudio verás un icono de R projects y un menú desplegable de proyectos disponibles.\n\n\n\n\n\nPara salir de un proyecto R, abre un nuevo proyecto o cierra el proyecto actual (Archivo - Cerrar proyecto).\n\n\n\n\n\n\nEjercicio\n\n\n\nAhora prueba creando un proyecto dentro de una carpeta local en tu computadora y genera una estructura de carpetas como la indicada anteriormente\n\n\n\n\n\n\n\n\nPro tip: uso de here() para rutas relativas\n\n\n\nEl paquete here() se utiliza para construir rutas de archivos y directorios de manera relativa al directorio del proyecto actual. En lugar de utilizar rutas absolutas (que especifican la ruta completa desde la raíz del sistema de archivos) o rutas relativas estándar (que se basan en la ubicación del script en ejecución), here() crea rutas relativas desde el directorio del proyecto.\n\n\n\n\n\nAllison Horst (@allison_horst)"
  },
  {
    "objectID": "1_Introduccion.html",
    "href": "1_Introduccion.html",
    "title": "Introducción al curso",
    "section": "",
    "text": "Tidyverse no es en si un paquete sino un conjunto de paquetes en el lenguaje de programación R, diseñado para facilitar la manipulación, visualización y análisis de datos. Desarrollado por Hadley Wickham y su equipo, Tidyverse busca proporcionar un enfoque coherente y eficiente para trabajar con datos, promoviendo la claridad, la reproducibilidad y la facilidad de uso en el análisis de datos.\nPodríamos decir que Tidyverse es una filosofía de trabajo que permite que diversos programas y funciones trabajen bajo esta misma filosofía.\n\n\n\n\n\n\n¿Realmente necesito aprender a usar Tidyverse?\n\n\n\nRealmente no. Todas las funciones y herramientas que veremos a lo largo de este curso pueden realizarse utilizando funciones de base de R. Sin embargo, Tidyverse tiene una estructura mas coherente, legible y comprensible."
  },
  {
    "objectID": "1_Introduccion.html#footnotes",
    "href": "1_Introduccion.html#footnotes",
    "title": "Introducción al curso",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTidyverse↩︎"
  },
  {
    "objectID": "10_Statistics.html",
    "href": "10_Statistics.html",
    "title": "Estadísticos con Tidyverse",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nImplementar análisis estadisticos compatibles con pipes con el paquete rstatixs.\nIncluir resultados estadisticos en gráficos generados con ggplot"
  },
  {
    "objectID": "10_Statistics.html#objetivos",
    "href": "10_Statistics.html#objetivos",
    "title": "Estadísticos con Tidyverse",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nImplementar análisis estadisticos compatibles con pipes con el paquete rstatixs.\nIncluir resultados estadisticos en gráficos generados con ggplot"
  },
  {
    "objectID": "10_Statistics.html#resumen-de-los-datos-con-get_summary_stats",
    "href": "10_Statistics.html#resumen-de-los-datos-con-get_summary_stats",
    "title": "Estadísticos con Tidyverse",
    "section": "Resumen de los datos con get_summary_stats()",
    "text": "Resumen de los datos con get_summary_stats()\nUna función muy útil es la función get_summary_stats() lo cual no arroja varios valores como el promedio, mediana, desviación estándar, etc, en una sola función.\nPara esto, utilizaremos la base de datos de los pingüinos\n\nlibrary(tidyverse)\nlibrary(rstatix)\n\npenguins &lt;- read_csv(\"data/palmer_penguins.csv\")\n\n\npenguins %&gt;% \n  get_summary_stats(flipper_length_mm, type= \"full\")\n\n# A tibble: 1 × 13\n  variable        n   min   max median    q1    q3   iqr   mad  mean    sd    se\n  &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 flipper_le…   342   172   231    197   190   213    23  16.3  201.  14.1  0.76\n# ℹ 1 more variable: ci &lt;dbl&gt;\n\n\nUtilizando la filosofía Tidyverse, podemos obtener los estadísticos por grupos:\n\npenguins %&gt;% \n  group_by(island, species) %&gt;% \n  get_summary_stats(flipper_length_mm)\n\n# A tibble: 5 × 15\n  species island variable     n   min   max median    q1    q3   iqr   mad  mean\n  &lt;chr&gt;   &lt;chr&gt;  &lt;fct&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie  Biscoe flipper…    44   172   203   190.  185.   193  8.25  6.67  189.\n2 Gentoo  Biscoe flipper…   123   203   231   216   212    221  9     5.93  217.\n3 Adelie  Dream  flipper…    56   178   208   190   185    193  8     5.93  190.\n4 Chinst… Dream  flipper…    68   178   212   196   191    201 10     7.41  196.\n5 Adelie  Torge… flipper…    51   176   210   191   187    195  8     5.93  191.\n# ℹ 3 more variables: sd &lt;dbl&gt;, se &lt;dbl&gt;, ci &lt;dbl&gt;\n\n\n\n\n\n\n\n\nTip\n\n\n\nCon el parámetro type podemos ajustar que tanta información que nos arroja la función, donde algunas de las opciones son:\n\nmean_sd: Promedio y desviación estándar\nmean_se: Promedio y error estándar\nfive_number: Mínimo, máximo, q1, q3 y mediana (como en un boxplot)\nfull: Nos arroja toda la información\n\n\npenguins %&gt;% \n  group_by(island, species) %&gt;% \n  get_summary_stats(flipper_length_mm, type = \"mean_se\")\n\n# A tibble: 5 × 6\n  species   island    variable              n  mean    se\n  &lt;chr&gt;     &lt;chr&gt;     &lt;fct&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie    Biscoe    flipper_length_mm    44  189. 1.01 \n2 Gentoo    Biscoe    flipper_length_mm   123  217. 0.585\n3 Adelie    Dream     flipper_length_mm    56  190. 0.88 \n4 Chinstrap Dream     flipper_length_mm    68  196. 0.865\n5 Adelie    Torgersen flipper_length_mm    51  191. 0.873"
  },
  {
    "objectID": "10_Statistics.html#shapiro_test",
    "href": "10_Statistics.html#shapiro_test",
    "title": "Estadísticos con Tidyverse",
    "section": "Shapiro_test",
    "text": "Shapiro_test\nUna de las pruebas mas comunes para la evaluar si nuestra muestra viene de una distribución normal es la prueba de Shapiro. Si bien los principios teóricos de esta prueba van mas allá de los objetivos de este curso, se puede implementar facilmente con la función shapiro_test(), en donde el único argumento que necesita es el nombre de la variable de interés.\n\npenguins %&gt;% \n  shapiro_test(flipper_length_mm)\n\n# A tibble: 1 × 3\n  variable          statistic             p\n  &lt;chr&gt;                 &lt;dbl&gt;         &lt;dbl&gt;\n1 flipper_length_mm     0.952 0.00000000354\n\n\nDe igual manera,siguiendo la filosofía Tidyverse, podemos realizar la prueba por grupos:\n\npenguins %&gt;% \n  group_by(species) %&gt;% \n  shapiro_test(flipper_length_mm)\n\n# A tibble: 3 × 4\n  species   variable          statistic       p\n  &lt;chr&gt;     &lt;chr&gt;                 &lt;dbl&gt;   &lt;dbl&gt;\n1 Adelie    flipper_length_mm     0.993 0.720  \n2 Chinstrap flipper_length_mm     0.989 0.811  \n3 Gentoo    flipper_length_mm     0.962 0.00162"
  },
  {
    "objectID": "10_Statistics.html#levene_test",
    "href": "10_Statistics.html#levene_test",
    "title": "Estadísticos con Tidyverse",
    "section": "levene_test()",
    "text": "levene_test()\nEvalúa la homogeneidad de varianzas entre grupos. A diferencia de la función anterior, el estadístico se calcula en función de una variable independiente, por lo que debemos utilizar el operado ~\n\npenguins %&gt;% \n  levene_test(flipper_length_mm ~ island)\n\nWarning in leveneTest.default(y = y, group = group, ...): group coerced to\nfactor.\n\n\n# A tibble: 1 × 4\n    df1   df2 statistic            p\n  &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1     2   339      19.4 0.0000000108\n\n\nDe igual manera es posible hacer el estadístico por grupos:\n\n# primero debemos remover los NAs\npenguins %&gt;% \n  drop_na() %&gt;% \n  group_by(sex) %&gt;% \n  levene_test(flipper_length_mm ~ species)\n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `data = map(.data$data, .f, ...)`.\nCaused by warning in `leveneTest.default()`:\n! group coerced to factor.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n\n# A tibble: 2 × 5\n  sex      df1   df2 statistic      p\n  &lt;chr&gt;  &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;  &lt;dbl&gt;\n1 female     2   162     2.90  0.0578\n2 male       2   165     0.467 0.627"
  },
  {
    "objectID": "10_Statistics.html#uso-deggpubr",
    "href": "10_Statistics.html#uso-deggpubr",
    "title": "Estadísticos con Tidyverse",
    "section": "Uso deggpubr",
    "text": "Uso deggpubr\n\nlibrary(ggpubr)\n\n\ncontrastes &lt;- list(c(\"Adelie\", \"Chinstrap\"), c(\"Adelie\", \"Gentoo\"), c(\"Chinstrap, Gentoo\"))\n\npenguins %&gt;% \n  drop_na() %&gt;% \n  ggplot(aes(x = species, y = flipper_length_mm)) +\n  geom_boxplot() +\n  stat_compare_means(method = \"t.test\", \n                     label = \"p.signif\", \n                     comparisons = list(c(\"Adelie\", \"Chinstrap\"),\n                                        c(\"Adelie\", \"Gentoo\"),\n                                        c(\"Chinstrap\", \"Gentoo\")))"
  },
  {
    "objectID": "10_Across.html",
    "href": "10_Across.html",
    "title": "Manipulación de datos II",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nFiltrar y manipular valores de datos tabulares.\nRealizar operaciones agrupadas.\nManejar pipes para unir cadena de operaciones en un data.frame.\nFiltrar y manipular datos faltantes (NA)."
  },
  {
    "objectID": "10_Across.html#operaciones-por-columna-con-across",
    "href": "10_Across.html#operaciones-por-columna-con-across",
    "title": "Manipulación de datos II",
    "section": "Operaciones por columna con across()",
    "text": "Operaciones por columna con across()\nLa función across() permite aplicar una o mas operaciones a multiples columnas de un tibble o data.frame de manera simultanea. Es particularmente útil para evitar repetir código cuando quieres hacer lo mismo en varias columnas.\nacross() tiene dos argumentos principales:\n\n.cols que selecciona las columnas a las que deseen hacer una operación. Utiliza la sintaxis de Tidy select, por lo que puedes seleccionar columnas por posición, nombre, tipo, etc.\n.funs es una función o lista de funciones que se desea aplicar a cada columna.\n\n\nstarwars %&gt;% \n  summarise(across(c(height, mass, birth_year), mean, na.rm = TRUE))\n\nWarning: There was 1 warning in `summarise()`.\nℹ In argument: `across(c(height, mass, birth_year), mean, na.rm = TRUE)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\n# A tibble: 1 × 3\n  height  mass birth_year\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   175.  97.3       87.6\n\n# que es lo mismo que \nstarwars %&gt;% \n  drop_na() %&gt;% \n  summarise(across(c(2:3, 7), mean))\n\n# A tibble: 1 × 3\n  height  mass birth_year\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   179.  77.8       51.3\n\n# que tambien es lo mismo que:\nstarwars %&gt;% \n  summarise(across(where(is.numeric), mean, na.rm = TRUE))\n\n# A tibble: 1 × 3\n  height  mass birth_year\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   175.  97.3       87.6\n\n\n\n\n\n\n\n\nPro tip\n\n\n\n\nLa tercera opción es la forma mas sencilla de poder realizar una operación “columnwise”. Sin embargo, tal como lo muestra la advertencia es una forma que no es preferida en las nuevas versiones de Tidyverse por problemas de compatibilidad en operaciones mas complejas.\nUna opción mucho mas versátil es utilizar funciones anónimas lo cual permite implementar funciones mas complejas y personalizadas.\nLas funciones anonimas se pueden implementar con la sintaxis\n~ mean(.x, na.rm = TRUE)\nEntonces, si queremos aplicar el promedio usando esta función anónima:\n\nstarwars %&gt;% \n  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))\n\n# A tibble: 1 × 3\n  height  mass birth_year\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   175.  97.3       87.6\n\n\ny así podemos implementar funciones mas complejas\n\nstarwars %&gt;% \n  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE) / sd(.x,na.rm = TRUE)))\n\n# A tibble: 1 × 3\n  height  mass birth_year\n   &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1   5.02 0.574      0.566"
  },
  {
    "objectID": "11_TimeSeries.html",
    "href": "11_TimeSeries.html",
    "title": "Análisis de series de tiempo",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nReconocer los distintos tipos de objetos de fechas y fecha-tiempo.\nVisualizar series de tiempo.\nAgrupar datos de acuerdo a lapsos de tiempo.\nEntender e identificar los patrones principales en las series de tiempo: tendencia, estacional y residual."
  },
  {
    "objectID": "11_TimeSeries.html#extraer-el-componente-estacional-tendencia-y-anomalías",
    "href": "11_TimeSeries.html#extraer-el-componente-estacional-tendencia-y-anomalías",
    "title": "Análisis de series de tiempo",
    "section": "Extraer el componente estacional, tendencia y anomalías",
    "text": "Extraer el componente estacional, tendencia y anomalías\nLa descomposición de las serie de tiempo busca separar la serie en sus principales componentes: observada, estacional, tendencia y residuo.\n\nObservada (Observed): Es la serie de tiempo original.Contiene todas las variaciones, patrones y tendencias presentes en los datos.\nEstacional (Seasonal): Representa los patrones que se repiten en intervalos fijos (estacionalidad).\nTendencia (Trend): Muestra los cambios a largo plazo en la serie y permite identificar aumentos o disminuciones graduales en los datos, eliminando el ruido a corto plazo.\nResiduo (Remainder): También llamado componente de error o ruido. Es lo que queda después de eliminar la tendencia y la estacionalidad. Idealmente, debe parecerse a un ruido blanco (fluctuaciones aleatorias sin patrón definido).\n\nEstos componentes puedes extraerse con la función plot_stl_diagnostics del paquete timetk.\n\nsst_data_tidy %&gt;% \n  plot_stl_diagnostics(\n    .date_var = date,                 # Columna que contiene las fechas de la serie temporal.\n    .value = temperatura_promedio,     # Columna con los valores a analizar (temperatura).\n    .frequency = \"year\",               # Estacionalidad de la serie (ciclos de un año).\n    .trend = \"1 year\"                  # Suaviza las fluctuaciones con una ventana de un año.\n  )\n\nfrequency = 365 observations per 1 year\n\n\ntrend = 366 observations per 1 year\n\n\n\n\n\n\nFinalmente podemos obtener boxplot de los datos en diferente estacionalidad (anual, mensual, diaria, etc)\n\nsst_data_tidy %&gt;% \n  plot_seasonal_diagnostics(\n    .date_var = date,              \n    .value = temperatura_promedio,   \n    .feature_set = c(\"month.lbl\", \"year\")\n  )"
  },
  {
    "objectID": "2_RBasico.html",
    "href": "2_RBasico.html",
    "title": "R y Rstudio: Comandos Basicos",
    "section": "",
    "text": "R es un lenguaje de programación y un entorno de software libre dedicado principalmente al análisis estadístico y la visualización de datos. Desarrollado inicialmente por los laboratorios de AT&T a partir de otro lenguaje de programación.\nEntre las características que han hecho de R un lenguaje muy popular entre la comunidad científica y académica (ademas de que es gratuito 😉 ) es su capacidad para manejar y analizar grandes conjuntos de datos, junto con una vasta colección de paquetes desarrollados por la comunidad, lo hace altamente versátil y poderoso."
  },
  {
    "objectID": "2_RBasico.html#introducción-a-r-y-algunos-comandos-básicos",
    "href": "2_RBasico.html#introducción-a-r-y-algunos-comandos-básicos",
    "title": "R y Rstudio: Comandos Basicos",
    "section": "",
    "text": "R es un lenguaje de programación y un entorno de software libre dedicado principalmente al análisis estadístico y la visualización de datos. Desarrollado inicialmente por los laboratorios de AT&T a partir de otro lenguaje de programación.\nEntre las características que han hecho de R un lenguaje muy popular entre la comunidad científica y académica (ademas de que es gratuito 😉 ) es su capacidad para manejar y analizar grandes conjuntos de datos, junto con una vasta colección de paquetes desarrollados por la comunidad, lo hace altamente versátil y poderoso."
  },
  {
    "objectID": "2_RBasico.html#generalidades",
    "href": "2_RBasico.html#generalidades",
    "title": "R y Rstudio: Comandos Basicos",
    "section": "Generalidades",
    "text": "Generalidades\nAntes de iniciar en el Tidyverse vamos a revisar algunas funcionalidades básicas de R tales como crear objetos y vectores así como revisar los diferentes tipos de estructuras de datos.\nAlgunos aspectos importantes que debemos recordar son los siguientes:\n\nR es sensible a las mayúsculas y minúsculas, de manera que A es diferente que a de la misma forma que la función anova() es diferente a la función Anova()\nEl símbolo # sirve para insertar un comentario en la línea de comando, de manera que todo lo que siga después de # no se ejecutara. Es importante incluir comentarios como parte de las buenas practicas en el uso de R ya que le facilitará el trabajo a tus colaboradores y revisores (y a ti mismo) saber que estas haciendo en cada paso.\nEn la consola usualmente veremos el símbolo &gt; lo que la indica que la consola esta lista para recibir nuevas instrucciones. Si por el contrario vemos el símbolo + entonces nos esta indicando que no hemos terminado de completar correctamente una línea de código.\nSi despúes de ejecutar un comando la consola nos arroja un mensaje de advertencia WARNING significa que el comando se ejecutó pero hay algo inesperado que debe revisarse. Por el contrario si nos arroja un mensaje de error ERROR entonces hay algo mal en la línea de codigo y por lo tanto no se pudo ejecutar."
  },
  {
    "objectID": "2_RBasico.html#uso-de-la-línea-de-comando-como-calculadora",
    "href": "2_RBasico.html#uso-de-la-línea-de-comando-como-calculadora",
    "title": "R y Rstudio: Comandos Basicos",
    "section": "Uso de la línea de comando como calculadora",
    "text": "Uso de la línea de comando como calculadora\nPodemos utilizar R para realizar operaciones básicas:\n\n1 + 2 #suma\n\n[1] 3\n\n4 - 3 #resta\n\n[1] 1\n\n5 * 5 #multiplicación\n\n[1] 25\n\n4 / 2 #división\n\n[1] 2\n\n4 ^ 2 #Exponente\n\n[1] 16\n\n4 ** 2 #Exponente\n\n[1] 16\n\n\nOperadores en R:\n\n\n\nOperador\nsignificado\n\n\n\n\n*\nMultiplicación\n\n\n-\nResta\n\n\n+\nSuma\n\n\n^\nElevar a potencia\n\n\n/\nDivisión\n\n\n&lt;\nMenor que\n\n\n&gt;\nMayor que\n\n\n&lt;=\nMenor o igual que\n\n\n&gt;=\nMayor o igual que\n\n\n==\nExactamente igual\n\n\n!=\nDistinto"
  },
  {
    "objectID": "2_RBasico.html#uso-de-objetos",
    "href": "2_RBasico.html#uso-de-objetos",
    "title": "R y Rstudio: Comandos Basicos",
    "section": "Uso de objetos",
    "text": "Uso de objetos\nPara crear un nuevo objeto se puede usar “=” o “&lt;-”. Este nuevo objeto, se almacenará en la memoria y se puede usar para otras operaciones.\n\nx &lt;- 2 #asignar a la variable x el valor de 2\nx\n\ny = 3 #asignar a la variable y el valor de 3\ny\n\n#resultado de la suma x + y\nx + y\n\nz &lt;- x + y #asiganr el resultado de x + y  a la variable z\nz\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\nCambia el valor de la variable x a 5. ¿Que pasa con z?\nQue tengo que hacer para actualizar el objeto z\n\n\n\nLas variables no solo puede contener números, sino caracteres, listas o incluso gráficos\n\ncaracter &lt;- \"siete\"\ncaracter\n\n[1] \"siete\"\n\n\n\n\n\n\n\n\nConsejos para nombrar variables\n\n\n\nEs posible asignar casi cualquier nombre a un objeto aunque existen algunas reglas y recomendaciones que hay que considerar:\n\nEvita iniciar con un número (2x incorrecto pero x2 es valido).\nEvita usar nombres de funciones (ifelse, for, c, etc.).\nUsa guiones bajos para separar palabras. (snake_case).\nEvita nombres de una sola letra.\nProcura usar nombres claros y descriptivos. El nombre debe ser lo suficientemente claro para que alguien más (o tú mismo en el futuro) pueda entender su propósito sin necesidad de comentarios adicionales.\n\n\n\n\n\n\n\n\n\nEjercicio:\n\n\n\n¿Cuales de estas formas de definir una variables es incorrecta?\n\nmi.variable &lt;-\nmi_variable &lt;-\nmi variable &lt;-\nmi-variable &lt;-"
  },
  {
    "objectID": "2_RBasico.html#tipos-y-estructura-de-datos-classes",
    "href": "2_RBasico.html#tipos-y-estructura-de-datos-classes",
    "title": "R y Rstudio: Comandos Basicos",
    "section": "Tipos y estructura de datos (Classes)",
    "text": "Tipos y estructura de datos (Classes)\nR tiene los siguientes tipos de datos basicos:\n\nlogical: valores lógicos, pueden ser TRUE o FALSE\nnumeric: números reales (1.0,2,3.1416, 3E-10)\ncharacter:caracteres (letras y/o números). Delimitados por “” (“uno”, “Miguel”, “FALSO”)\ninterger:valores enteros (1,2,3)\nNA: dato no disponible\nNaN:no es un número (not a number)\n\nPor otro lado, las estructuras de datos pueden ser de tipo vector, data.frame, matriz, arreglo o lista:\n\n\n\n\n\nfuente: http://venus.ifca.unican.es/Rintro/_images/dataStructuresNew.png\nEs importante resaltar que solamente los data.frame pueden contener distintos tipos de datos (números, caracteres, etc) mientras que el resto solo puede contener un tipo de dato (solo caracteres, solo números, etc).\n\nSi no sabes que tipo de dato contiene una variable, se puede usar la función class()\n\nclass(x)      \n\n[1] \"numeric\"\n\nclass(caracter)     \n\n[1] \"character\""
  },
  {
    "objectID": "2_RBasico.html#vectores",
    "href": "2_RBasico.html#vectores",
    "title": "R y Rstudio: Comandos Basicos",
    "section": "Vectores",
    "text": "Vectores\nUn vector es la estructura de datos más sencilla en R. Un vector es una colección de uno o más datos del mismo tipo.\nPara crear un vector utilizamos el comando c(), de combinar\n\nnumeros &lt;- c(1, 2, 3)\n\nnumeros\n\n[1] 1 2 3\n\n\nTambién podemos crear un nuevo vector a partir de otros objetos en el ambiente, como por ejemplo, los objetos x, y y z que ya tenemos.\n\nvariables &lt;- c(x, y, z)\nvariables\n\n[1] 2 3 5\n\n\nLos vectores también pueden contener elementos de otros tipos como caracteres, los cuales tienen que ir dentro de comillas \" \".\n\nnombres &lt;- c(\"Juan\", \"Pepe\", \"Sofia\")\n\n\n\n\n\n\n\nWarning\n\n\n\n¿Que pasa si intentamos unir el vector de caracteres (nombres) con números (variables)\n\nnombre_variable &lt;- c(nombres, variables)\nnombre_variable\n\n[1] \"Juan\"  \"Pepe\"  \"Sofia\" \"2\"     \"3\"     \"5\"    \n\n\nComo las cadenas de texto son el tipo de dato más flexible, siempre que creamos un vector que incluye un dato de este tipo, el resultado será un vector de texto."
  },
  {
    "objectID": "4_ImportarDatos.html",
    "href": "4_ImportarDatos.html",
    "title": "Importar datos",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nImportar datos de archivos csv,txt, tsv, xlsx y otros\nReconocer los objetos tibbles y diferenciarlo de un data frame\nExportar datos en diferentes formatos"
  },
  {
    "objectID": "4_ImportarDatos.html#funciones-base-para-importar-archivos",
    "href": "4_ImportarDatos.html#funciones-base-para-importar-archivos",
    "title": "Importar datos",
    "section": "Funciones base para importar archivos",
    "text": "Funciones base para importar archivos\nPara importar un archivo a nuestro ambiente podemos utilizar las funciones base read.table, read.csv, read.delim. Por ejemplo, para abrir un archivo txt separado por tabuladores utilizando la función:\n\ndf &lt;- read.table(\"data/palmer_penguins.txt\", header = TRUE, sep = \"\\t\")\nhead(df)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007\n\n\no usando read.csv\n\ndf &lt;- read.csv(\"data/palmer_penguins.csv\")\nhead(df)\n\n  species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n1  Adelie Torgersen           39.1          18.7               181        3750\n2  Adelie Torgersen           39.5          17.4               186        3800\n3  Adelie Torgersen           40.3          18.0               195        3250\n4  Adelie Torgersen             NA            NA                NA          NA\n5  Adelie Torgersen           36.7          19.3               193        3450\n6  Adelie Torgersen           39.3          20.6               190        3650\n     sex year\n1   male 2007\n2 female 2007\n3 female 2007\n4   &lt;NA&gt; 2007\n5 female 2007\n6   male 2007"
  },
  {
    "objectID": "4_ImportarDatos.html#importar-datos-a-lá-tidyverse",
    "href": "4_ImportarDatos.html#importar-datos-a-lá-tidyverse",
    "title": "Importar datos",
    "section": "Importar datos a lá Tidyverse",
    "text": "Importar datos a lá Tidyverse\nDentro del Tidyverse, la importación de datos rectangulares se realiza con el paquete readr el cual tiene funciones que van a sonar muy familiares:\n\nread_csv(): comma-separated values (CSV)\nread_tsv(): tab-separated values (TSV)\nread_csv2(): semicolon-separated values with , as the decimal mark\nread_delim(): delimited files (CSV and TSV are important special cases)\nread_table(): whitespace-separated files\n\n\n\n\n\n\n\n¿Has notado algo? 🧐\n\n\n\nComo ves, los nombres de las funciones son muy parecidas a las funciones base pero reemplazando el “.” por un “_”. Esta tendencia se repite en numerosas funciones que siguen la filosofía tidy. Por ejemplo, en lugar de la prueba shapiro.test, rstatix utiliza la función shapiro_test.\n\n\nHagamos la prueba…\n\nlibrary(tidyverse)\n\n\ndf &lt;- read_table(\"data/palmer_penguins.txt\")\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  species = col_character(),\n  island = col_character(),\n  bill_length_mm = col_double(),\n  bill_depth_mm = col_double(),\n  flipper_length_mm = col_double(),\n  body_mass_g = col_double(),\n  sex = col_character(),\n  year = col_double()\n)\n\n\nObserva como, aún antes de desplegar la tabla,read_table ya nos arroja información sobre la estructura de los datos y nos indica si cada columna es número, carácter o de otro tipo.\nAhora observa como se despliega la tabla\n\ndf\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\n\n¿double? ¿character? 😱\n\n\n\nEn caso de que no lo recuerdes, estos son los principales tipos de datos en R\n\n\n\nTipo\nDescripción\nEjemplo\n\n\nNumeric\ninterger números enteros\n0L, 1L\n\n\nNumeric\ndouble números reales\n1.0,\n\n\nLogic\nvalores booleanos\nTRUE, FALSE\n\n\nCharacter\ncadena de texto\n“Hola mundo”\n\n\nFactor\nrepresentan datos categóricos\nmacho, hembra\n\n\nDates\nFechas\n“2023-08-24”"
  },
  {
    "objectID": "4_ImportarDatos.html#tibbles",
    "href": "4_ImportarDatos.html#tibbles",
    "title": "Importar datos",
    "section": "Tibbles",
    "text": "Tibbles\nCon R base, la función read.table nos genera un data frame pero readr nos genera un tibble los cuales son una versión actualizada de un data.frame.\nHay varias diferencias entre tibbles y data.frames. Puedes leer mas en la viñeta. Sin embargo, algunas de las diferencias mas notables son:\n\nEl tipo de entrada permanece inalterado: los data.frames son conocidos por tratar las cadenas de texto como factores; esto no sucederá con los tibbles.\nLos nombres de las variables permanecen inalterados: En R base, al crear data.frames se eliminan los espacios de los nombres, convirtiéndolos en puntos o agregando una “x” antes de los nombres de las columnas numéricas. Al crear tibbles, los nombres de las variables (columnas) no cambian.\nNo hay row.names() para un tibble: Los datos ordenados requieren que las variables se almacenen de manera consistente, eliminando la necesidad de nombres de filas. Los tibbles imprimen las primeras diez filas y columnas que caben en una pantalla: Imprimir un tibble en la pantalla nunca mostrará todo el enorme marco de datos. Por defecto, solo muestra lo que cabe en tu pantalla.\n\n\nconvertir data.frame a tibble\nSi tenemos datos rectangulares como data.frame podemos convertirlo facilmente a tibble con la función as_tibble()\nPor ejemplo, podemos:\n\nas_tibble(trees)\n\n# A tibble: 31 × 3\n   Girth Height Volume\n   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1   8.3     70   10.3\n 2   8.6     65   10.3\n 3   8.8     63   10.2\n 4  10.5     72   16.4\n 5  10.7     81   18.8\n 6  10.8     83   19.7\n 7  11       66   15.6\n 8  11       75   18.2\n 9  11.1     80   22.6\n10  11.2     75   19.9\n# ℹ 21 more rows\n\n\n\n\n\n\n\n\n¿Cuidado!\n\n\n\nRecuerda que si solo ejecutamos el comando as_tibble(trees) R solo nos arrojará el resultado en la consola pero no hizo ningún cambio al objeto trees. Para esto necesitamos renombrar o generar un nuevo objeto. Por ejemplo\n\ntrees_tbl &lt;- as_tibble(trees)\n\nahora si, tenemos un nuevo objeto como tibble\n\nclass(trees)\n\n[1] \"data.frame\"\n\nclass(trees_tbl)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\nAl igual que como lo haríamos con un data.frame o una matriz, podemos acceder a las primeras o últimas filas de nuestro tibble con las funciones head() y tail()\n\nhead(df)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\ntail(df)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\ntibble()\nTambién es posible hacer tibble sobre la marcha utilizando la función tibble(). Por ejemplo:\n\nmi_tibl &lt;- tibble(\n  a = 1:5,\n  b = 6:10,\n  c = 1,\n  z = (a + b)^2 + c\n)\n\nmi_tibl\n\n# A tibble: 5 × 4\n      a     b     c     z\n  &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     6     1    50\n2     2     7     1    82\n3     3     8     1   122\n4     4     9     1   170\n5     5    10     1   226\n\n\nNota que al momento de generar este tibble, puedes hacer referencias a columnas del mismo tibble (columna z)\nOtro comportamiento de los tibbles es que es posible tener nombres de columnas con espacios u otros caracteres y estos estarán rodeados por ``\n\nmi_tibl &lt;- tibble(\n  `cinco números` = 1:5,\n  `12` = \"numeric\",\n  `:)` = \"smile\",\n)\n\nmi_tibl\n\n# A tibble: 5 × 3\n  `cinco números` `12`    `:)` \n            &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;\n1               1 numeric smile\n2               2 numeric smile\n3               3 numeric smile\n4               4 numeric smile\n5               5 numeric smile"
  },
  {
    "objectID": "4_ImportarDatos.html#importar-desde-excel",
    "href": "4_ImportarDatos.html#importar-desde-excel",
    "title": "Importar datos",
    "section": "Importar desde Excel",
    "text": "Importar desde Excel\nLas hojas de calculo de Excel (formatos .xls o .xlsx) siguen siendo muy comunes y muy utilizados dentro de la comunidad académica.\nTidyverse no tiene dentro de su núcleo una función para importar este tipo de archivos, pero esto se soluciona fácilmente con el paquete readxl.\n\n\n\n\n\n\ninstall.packages(\"readxl\")\n\n\nlibrary(readxl)\n\nCon esto podemos usar la función read_excel() que no necesita ningún otro argumento mas que la ruta (path) donde se encuentra el archivo .xlsx\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas.xlsx\")\n\nexcel_df\n\n# A tibble: 405 × 9\n   `Sample ID` ExpNum TreatTemp Meas_Temp `WetWeight(g)` `buffer(ml)`\n   &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;        &lt;dbl&gt;\n 1 Hf100U           3        24        18          0.093         0.93\n 2 Hf100U           3        24        18          0.093         0.93\n 3 Hf100U           3        24        32          0.093         0.93\n 4 Hf100U           3        24        32          0.093         0.93\n 5 Hf101U           3        30        18          0.114         1.14\n 6 Hf101U           3        30        18          0.114         1.14\n 7 Hf101U           3        30        32          0.114         1.14\n 8 Hf101U           3        30        32          0.114         1.14\n 9 Hf102U           3        30        18          0.092         0.92\n10 Hf102U           3        30        18          0.092         0.92\n# ℹ 395 more rows\n# ℹ 3 more variables: `MessVol(ul)` &lt;dbl&gt;, slopeTDH &lt;dbl&gt;, ActivityTDH &lt;dbl&gt;\n\n\nEn caso de que los datos de interes estén en una hoja en particular usamos el argumento sheet=\n\nexcel_df&lt;- read_excel(\"data/actividad_enzimas.xlsx\", sheet = \"hoja1\")\n\nUn caso mas complicado es cuando nuestro datos inician unas filas mas abajo y en un determinado intervalo de columnas. Otro caso común es que los nombres de las columnas tengan símbolos especiales o que estén repetidos\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas.xlsx\", \n                       sheet = \"hoja3\", skip = 3, na = \"-\")\n\nNew names:\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   `Número de muestra` `Número de experimento` Tratamiento Temperatura\n   &lt;chr&gt;                                 &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                    3          24          18\n 2 Hf100U                                    3          24          18\n 3 Hf100U                                    3          24          32\n 4 Hf100U                                    3          24          32\n 5 Hf101U                                    3          30          18\n 6 Hf101U                                    3          30          18\n 7 Hf101U                                    3          30          32\n 8 Hf101U                                    3          30          32\n 9 Hf102U                                    3          30          18\n10 Hf102U                                    3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: `peso húmedo (g)` &lt;dbl&gt;, `buffer (ml)` &lt;dbl&gt;,\n#   `volumen de reaccion (ul)` &lt;dbl&gt;, `concentración g/ml` &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;\n\n\nEn caso de que tengamos otra información que nos este generando conflicto podemos especificar el rango de datos de interés\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\")\n\nNew names:\n• `pendiente` -&gt; `pendiente...9`\n• `pendiente` -&gt; `pendiente...10`\n\nexcel_df\n\n# A tibble: 405 × 10\n   `Número de muestra` `Número de experimento` Tratamiento Temperatura\n   &lt;chr&gt;                                 &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Hf100U                                    3          24          18\n 2 Hf100U                                    3          24          18\n 3 Hf100U                                    3          24          32\n 4 Hf100U                                    3          24          32\n 5 Hf101U                                    3          30          18\n 6 Hf101U                                    3          30          18\n 7 Hf101U                                    3          30          32\n 8 Hf101U                                    3          30          32\n 9 Hf102U                                    3          30          18\n10 Hf102U                                    3          30          18\n# ℹ 395 more rows\n# ℹ 6 more variables: `peso húmedo (g)` &lt;dbl&gt;, `buffer (ml)` &lt;dbl&gt;,\n#   `volumen de reaccion (ul)` &lt;dbl&gt;, `concentración g/ml` &lt;dbl&gt;,\n#   pendiente...9 &lt;dbl&gt;, pendiente...10 &lt;dbl&gt;\n\n\n\n\n\n\n\n\nHeterogeneidad en los nombres de las columna 🤯\n\n\n\nObserva como los tibbles permite que haya símbolos, espacios, acentos y alternancia de mayúsculas y minúsculas en los nombres de las columnas. Sin embargo, al momento de trabajar, esta heterogeneidad puede darnos algunos dolores de cabeza. Esto se puede solucionar con el paquete janitor."
  },
  {
    "objectID": "4_ImportarDatos.html#limpiar-etiquetas-con-janitor",
    "href": "4_ImportarDatos.html#limpiar-etiquetas-con-janitor",
    "title": "Importar datos",
    "section": "Limpiar etiquetas con janitor",
    "text": "Limpiar etiquetas con janitor\n\n\n\nAllison Horst (@allison_horst)\n\n\nEl paquete Janitor es una herramienta pequeña pero increíblemente útil y conveniente cuando se trata de limpiar y mantener conjuntos de datos en R. Además, es un paquete orientado a Tidyverse, por lo que se integra perfectamente con los pipes.\nRegresemos a los nombres de las columnas de nuestro archivo excel antes de utilizar janitor\n\nexcel_df &lt;- read_excel(\"data/actividad_enzimas.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\")\n\n\n\n [1] \"Número de muestra\"        \"Número de experimento\"   \n [3] \"Tratamiento\"              \"Temperatura\"             \n [5] \"peso húmedo (g)\"          \"buffer (ml)\"             \n [7] \"volumen de reaccion (ul)\" \"concentración g/ml\"      \n [9] \"pendiente...9\"            \"pendiente...10\"          \n\n\n\nNo hay consistencia entre el uso de mayúsculas y minúsculas en los nombres. Recuerda que R es sensible a mayúsculas, por lo que Temperatura no es lo mismo que temperatura.\nTenemos símbolos, como acentos, que nos pueden generar conflictos, sobre todo si tenemos símbolos en otros idiomas.\nLos espacios en blanco así como otros símbolos como / son reemplazados por un punto. Esto genera etiquetas complicadas.\n\nLo ideal es tener consistencia en el formato de las etiquetas. Algunos formatos conocidos se ilustran a continuación:\n\n\n\nAllison Horst (@alisson_horst)\n\n\nAhora utilicemos janitor para limpiar las etiquetas\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\nexcel_clean &lt;- clean_names(excel_df)\nexcel_clean\n\n# A tibble: 405 × 10\n   numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente_9 &lt;dbl&gt;, pendiente_10 &lt;dbl&gt;\n\n\nlas opciones son:\n\n“snake”\n“small_camel”\n“big_camel”\n“screaming_snake”\n“parsed”\n“lower_upper”\n“upper_lower”\n\npor ejemplo:\n\nexcel_clean &lt;- clean_names(excel_df, case = \"screaming_snake\")\nexcel_clean\n\n# A tibble: 405 × 10\n   NUMERO_DE_MUESTRA NUMERO_DE_EXPERIMENTO TRATAMIENTO TEMPERATURA PESO_HUMEDO_G\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: BUFFER_ML &lt;dbl&gt;, VOLUMEN_DE_REACCION_UL &lt;dbl&gt;,\n#   CONCENTRACION_G_ML &lt;dbl&gt;, PENDIENTE_9 &lt;dbl&gt;, PENDIENTE_10 &lt;dbl&gt;\n\n\nPara ahorrar tiempo, con janitor podemos integrar la función make_clean_name al momento de importar datos ya sea con readxl o con readr. Por ejemplo:\n\nexcel_clean &lt;- read_excel(\"data/actividad_enzimas.xlsx\", \n                       sheet = \"hoja3\", range = \"D4:M409\", na = \"-\",\n                       .name_repair =  make_clean_names)\nexcel_clean\n\n# A tibble: 405 × 10\n   numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n   &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n 1 Hf100U                                3          24          18         0.093\n 2 Hf100U                                3          24          18         0.093\n 3 Hf100U                                3          24          32         0.093\n 4 Hf100U                                3          24          32         0.093\n 5 Hf101U                                3          30          18         0.114\n 6 Hf101U                                3          30          18         0.114\n 7 Hf101U                                3          30          32         0.114\n 8 Hf101U                                3          30          32         0.114\n 9 Hf102U                                3          30          18         0.092\n10 Hf102U                                3          30          18         0.092\n# ℹ 395 more rows\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente &lt;dbl&gt;, pendiente_2 &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\n\n¿Por que el punto?\n\n\n\n.name_repair= se pone con un punto para diferenciar que es un parámetro adicional (o auxiliar a la función principal (read_excel)\n\n\n\n\n\n\n\n\nWarning\n\n\n\nObserva que tanto readxl como readr interpretan las columnas de número de experimento, tratamiento y temperatura como variables numéricas debido a que analizan la cantidad de datos para inferir el tipo de variable. No obstante, estas variables son en realidad factores, ya que representan categorías. Más adelante veremos cómo realizar este ajuste de manera manual."
  },
  {
    "objectID": "4_ImportarDatos.html#echando-un-vistado-a-los-datos",
    "href": "4_ImportarDatos.html#echando-un-vistado-a-los-datos",
    "title": "Importar datos",
    "section": "Echando un vistado a los datos",
    "text": "Echando un vistado a los datos\nUn aspecto importante para el análisis de datos es tener una perspectiva rápida del tibble o data frame para entender las variables que tenemos, así como los patrones generales de los datos.\nHay varias funciones que podemos utilizar. Ya mencionamos algunas herramienta como head() o tail() para echar un vistazo a las primeras o últimas filas de la tabla, respectivamente.\nOtra herramienta es la función glimpse() de dplyr que nos muestra algunos datos de cada columna de nuestro tibble para tener una idea de la estructura de la tabla.\n\nglimpse(excel_clean)\n\nRows: 405\nColumns: 10\n$ numero_de_muestra      &lt;chr&gt; \"Hf100U\", \"Hf100U\", \"Hf100U\", \"Hf100U\", \"Hf101U…\n$ numero_de_experimento  &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ tratamiento            &lt;dbl&gt; 24, 24, 24, 24, 30, 30, 30, 30, 30, 30, 30, 30,…\n$ temperatura            &lt;dbl&gt; 18, 18, 32, 32, 18, 18, 32, 32, 18, 18, 32, 32,…\n$ peso_humedo_g          &lt;dbl&gt; 0.093, 0.093, 0.093, 0.093, 0.114, 0.114, 0.114…\n$ buffer_ml              &lt;dbl&gt; 0.93, 0.93, 0.93, 0.93, 1.14, 1.14, 1.14, 1.14,…\n$ volumen_de_reaccion_ul &lt;dbl&gt; 20, 10, 20, 10, 20, 10, 20, 10, 20, 10, 20, 10,…\n$ concentracion_g_ml     &lt;dbl&gt; 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.…\n$ pendiente              &lt;dbl&gt; 0.0331, 0.0145, 0.1431, 0.0653, 0.0354, 0.0155,…\n$ pendiente_2            &lt;dbl&gt; 2.660772, 2.331190, 11.503215, 10.498392, 2.845…\n\n\nLa función summary() es parte de las funciones base de R y es particularmente útil cuando tenemos datos continuos, ya que nos muestra, para cada columna, los valores mínimos, máximos, promedio, mediana y el 1er y 3er quartil.\n\nsummary(excel_clean)\n\n numero_de_muestra  numero_de_experimento  tratamiento     temperatura   \n Length:405         Min.   :1.000         Min.   :18.00   Min.   :18.00  \n Class :character   1st Qu.:2.000         1st Qu.:24.00   1st Qu.:18.00  \n Mode  :character   Median :3.000         Median :24.00   Median :18.00  \n                    Mean   :2.528         Mean   :26.04   Mean   :24.74  \n                    3rd Qu.:4.000         3rd Qu.:30.00   3rd Qu.:32.00  \n                    Max.   :4.000         Max.   :32.00   Max.   :32.00  \n                                                                         \n peso_humedo_g       buffer_ml      volumen_de_reaccion_ul concentracion_g_ml\n Min.   :0.02900   Min.   :0.2900   Min.   :10.00          Min.   :0.1       \n 1st Qu.:0.06700   1st Qu.:0.6700   1st Qu.:10.00          1st Qu.:0.1       \n Median :0.08500   Median :0.8500   Median :20.00          Median :0.1       \n Mean   :0.08387   Mean   :0.8387   Mean   :15.04          Mean   :0.1       \n 3rd Qu.:0.09900   3rd Qu.:0.9900   3rd Qu.:20.00          3rd Qu.:0.1       \n Max.   :0.18900   Max.   :1.8900   Max.   :20.00          Max.   :0.1       \n                                                                             \n   pendiente        pendiente_2    \n Min.   :0.00000   Min.   : 0.000  \n 1st Qu.:0.01480   1st Qu.: 1.632  \n Median :0.03500   Median : 4.594  \n Mean   :0.04949   Mean   : 5.205  \n 3rd Qu.:0.07290   3rd Qu.: 8.163  \n Max.   :0.31390   Max.   :25.233  \n                   NA's   :13"
  },
  {
    "objectID": "4_ImportarDatos.html#exportar-datos",
    "href": "4_ImportarDatos.html#exportar-datos",
    "title": "Importar datos",
    "section": "Exportar datos",
    "text": "Exportar datos\nUna vez terminado nuestro análisis debemos guardarlo. Siguiendo la recomendación que vimos anteriormente, lo ideal es guardar los datos ya procesados (ya sea que se haya realizado algún tipo de filtrado o transformación) en una carpeta diferente a la carpeta donde están los datos crudos, los cuales se recomienda que se preserven sin alteraciones.\nPodemos crear una nueva carpeta con Archivos &gt; Nuevo directorio o desde la línea de comando usando la función dir.create()\n\ndir.create(\"resultados/tablas\", recursive = TRUE)\n\nWarning in dir.create(\"resultados/tablas\", recursive = TRUE):\n'resultados\\tablas' already exists\n\n\nPara guardar nuestros datos, las funciones que utilizaremos mas frecuentemente son write.table y write_csv()\nPor ejemplo, vamos a tomar las primeras filas de nuestro objeto excel_clean con la función head()\n\nexcel_subset &lt;- head(excel_clean)\nexcel_subset\n\n# A tibble: 6 × 10\n  numero_de_muestra numero_de_experimento tratamiento temperatura peso_humedo_g\n  &lt;chr&gt;                             &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;         &lt;dbl&gt;\n1 Hf100U                                3          24          18         0.093\n2 Hf100U                                3          24          18         0.093\n3 Hf100U                                3          24          32         0.093\n4 Hf100U                                3          24          32         0.093\n5 Hf101U                                3          30          18         0.114\n6 Hf101U                                3          30          18         0.114\n# ℹ 5 more variables: buffer_ml &lt;dbl&gt;, volumen_de_reaccion_ul &lt;dbl&gt;,\n#   concentracion_g_ml &lt;dbl&gt;, pendiente &lt;dbl&gt;, pendiente_2 &lt;dbl&gt;\n\n\nAhora lo guardamos en la carpeta que acabamos de crear usando la función write_csv()\n\nwrite_csv(excel_subset, file = \"resultados/tablas/excel_subset.csv\")\n\no con write.table() la cual nos permite usar una mayor diversidad de formatos\n\nwrite.table(excel_subset, file = \"resultados/tablas/excel_subset.txt\", sep = \"\\t\")\n\n\n\n\n\n\n\nEjercicio\n\n\n\nPon a prueba tus conocimientos\n\nAbre el archivo ejercicio_readxls.xlsx que se encuentra dentro de la carpeta datos.\nEvalúa a partir de que se fila inicia los datos de interés.\nLimpia los nombres de las columnas con janitor.\nVisualiza con summary o con gt_plt_summary() las variables de la tabla. ¿Cuales de ellas son categóricas?\nGuarda la nueva tabla como archivo csv dentro de la carpeta resultados/tablas.\n\n\n\nver codigo\ne1 &lt;- read_xlsx(\"data/ejercicio_readxls.xlsx\", skip = 3)\ne1_clean &lt;- clean_names(e1)\ngt_plt_summary(e1_clean)\nsummary(e1_clean)\nwrite_csv(x = e1_clean, \n          file = \"resultados/tablas/ejercicio_readxls_clean.csv\")"
  },
  {
    "objectID": "6_VisualizationGgplot.html",
    "href": "6_VisualizationGgplot.html",
    "title": "Visualización de datos con ggplot2",
    "section": "",
    "text": "Al final de esta lección serás capaz de:\n\nUtilizar ggplot2 para gráficar variables cualitativas y cuantitativas.\nReconocer los distintos elementos que componen un gráfico de ggplot2.\nUtilizar distintos tipos de geometrías (geoms) de acuerdo al tipo de variable."
  },
  {
    "objectID": "6_VisualizationGgplot.html#poniendo-capas-ggplot",
    "href": "6_VisualizationGgplot.html#poniendo-capas-ggplot",
    "title": "Visualización de datos con ggplot2",
    "section": "Poniendo capas: ggplot()",
    "text": "Poniendo capas: ggplot()\nPara empezar a hacer gráficos, vamos a utilizar la base de datos de los pingünios (penguins) que ya hemos utilizado anteriormente. Para crear un gráfico con ggplot se usa el comando ggplot()\n\nggplot(data = penguins)\n\n\n\n\n\n\n\n\nAl ejecutar la función, no se genera ningún error pero tampoco vemos ninguna gráfica. Esto se debe a que no hemos indicado a ggplot cuales son las coordenadas y ni las geometrías que queremos graficar.\nPara designar los estéticos, definimos el plano usando los datos de la longitud del culmen y la masa corporal ejecutando:\n\nggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g))\n\n\n\n\n\n\n\n\nEl argumento aes() es sinónimo de estética. ggplot2 considera que el eje x y y de la gráfica es estético, junto con el color, el tamaño, la forma, el relleno, etc. Se puede agregar cualquier estética que se desee dentro del argumento aes(), como por ejemplo indicar los ejes x y y, especificando las variables respectivas del conjunto de datos.\nLa variable en función de la cual el color, tamaño, forma y trazo debe cambiar también se puede especificar aquí mismo. Debes tener en cuenta que la estética especificada aquí será heredada por todas las capas geom() que se agregarán posteriormente.\nSin embargo, aún no vemos ninguna gráfica, ya que para esto es necesario indicar que tipo de geometría (geom()) de gráfica queremos utilizar.\nPara crear un diagrama, por ejemplo, de dispersión es necesario agregarle la geometria geom_point(). Es importante recalcar que cada nueva capa que agreguemos al gráfico se agrega con el símbolo +.\n\nggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g))+\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDonde poner los aes?\n\n\n\nLos aes() se pueden definir desde que se inicia la función ggplot()pero estos aes se heredaran al resto de las capas. Por otro lado, se pueden definir los aes dentro de cada geom()\n\nggplot(data = data, aes(x = x, y = y))+\n  geom_point()\n\nes igual que\n\nggplot()+\n  geom_point(data = data, aes(x = x, y = y))"
  },
  {
    "objectID": "6_VisualizationGgplot.html#aesthetics",
    "href": "6_VisualizationGgplot.html#aesthetics",
    "title": "Visualización de datos con ggplot2",
    "section": "Aesthetics()",
    "text": "Aesthetics()\nComo mencionamos, es posible agregar diferentes estéticos a la gráfica para controlar diversos aspectos como color, tamaño, forma, etc. Esto nos permite asignarle un estético a los grupos.\npor ejemplo, podemos asignarle un color diferente a cada especie con el argumento color\n\nggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g, color = species))+\n  geom_point()\n\n\n\n\n\n\n\n\nY asignarle una forma diferente a por sexo con el argumento shape\n\nggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g, color = species, shape = sex))+\n  geom_point()\n\n\n\n\n\n\n\n\no cambiar el tamaño con size\n\nggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g, color = species, shape = sex, size = bill_length_mm))+\n  geom_point()\n\n\n\n\n\n\n\n\n\nggplot(data = penguins, aes(x = bill_length_mm, y = body_mass_g, color = species))+\n  geom_point()+\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nggplot(data = penguins)+\n  geom_point(aes(x = bill_length_mm, y = body_mass_g, color = species))+\n  geom_smooth(aes(x = bill_length_mm, y = body_mass_g), method = \"lm\", color = \"grey75\")+\n  geom_smooth(aes(x = bill_length_mm, y = body_mass_g, color = species), method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "6_VisualizationGgplot.html#breve-tour-por-las-distintas-geometrias",
    "href": "6_VisualizationGgplot.html#breve-tour-por-las-distintas-geometrias",
    "title": "Visualización de datos con ggplot2",
    "section": "Breve tour por las distintas geometrias",
    "text": "Breve tour por las distintas geometrias\nLos nombres de las funciones de geometría siguen el patrón: geom_X donde X es el nombre de la geometría. Algunos ejemplos incluyen geom_point, geom_bar y geom_histogram.\nA continuación repasaremos algunas de las geometrías mas comunes:\n\nVariables continuas\nPara facilitar el tour, vamos a generar un objeto con las coordenadas de la longitud del pico distinguiendo en diferente color de relle\n\nbase &lt;- ggplot(penguins, aes(x = bill_length_mm, fill = species))\n\n\ngeom_histogram()\n\nbase + \n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\ngeom_density()\n\nbase +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\ngeom_qqplot()\n\nggplot(penguins, aes(sample = bill_length_mm, color = species)) +\n  geom_qq()+\n  geom_qq_line()\n\n\n\n\n\n\n\n\n\n\n\nVariables discretas\n\ngeom_bar() y geom_col()\nLas gráficas de barras son una de las visualizaciones mas comunes. ggplot ofrece dos alternativas dependiendo del formato de los datos que se vayan a graficar. Una descripción mas detallada sobre la diferencia entre ambos se puede encontrar aquí.\nRecordemos en nuestra sesión pasada que podemos contar el número de apariciones de un elemento dentro de un grupo con la función count()\n\npenguins %&gt;% \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      146\n2 Chinstrap    68\n3 Gentoo      119\n\n\nDe manera análoga, geom_bar() calculará el número de ocurrencias en cada nivel de una variable categórica.\n\nggplot(penguins, aes(x = species))+\n  geom_bar()\n\n\n\n\n\n\n\n\nPor el contrario, si queremos que gráfique un valor ya establecido en los datos, tenemos que incorporar el parámetro stat = \"identity\".\n\npenguins %&gt;%  \n  count(species) %&gt;%  \nggplot(aes(x = species, y = n))+\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\nPor otro lado, geom_col() es lo mismo que geom_bar(stat = \"identity\"), por lo que si tus datos contienen groups y el número de apariciones de cada uno de estos, puedes utilizar esta función\n\npenguins %&gt;% \n  count(species) %&gt;% \n  ggplot(.,aes(x = species, y = n))+\n  geom_col()\n\n\n\n\n\n\n\n\nPodemos incorporar mas variables discretas dentro de los aes() incorporando la variable fill=\n\nggplot(penguins, aes(x = species, fill = sex)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nPor default, geom_bar() nos arrojará una gráfica de barras apiladas. Si queremos poner cada grupo por separado, incorporamos el parametro position = \"dodge\"\n\nggplot(penguins, aes(x = species, fill = sex)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\nO usar position=\"fill\" para que nos arroje valores proporcionales\n\nggplot(penguins, aes(x = species, fill = sex)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio: Star Wars\n\n\n\n\nAbre la tabla starwars.csv que se encuentra en el directorio de databases y utilizando pipes genera los siguientes objetos:\n\nUna gráfico de densidad donde se compare la distribución de los valore de altura height de los planetas Tatooine y Naboo, excluyendo los androides.\nUna gráfica de barras de los mismas planetas y excluyendo androides donde se muestre la proporción de sexos.\nUna gráfica de barras donde se muestre el número de personajes de cada planeta del filme A New Hope\n\n\n\nver codigo\nstarwars &lt;- read_csv(\"data/starwars.csv\")\n\n#ejercicio e1\nstarwars %&gt;% \n  filter(homeworld %in% c(\"Tatooine\", \"Naboo\")) %&gt;% \n  filter(species != \"droid\") %&gt;% \n  ggplot(., aes(x = height, fill = homeworld))+\n  geom_density(alpha = 0.4)\n\n\n# ejercicio e2\nstarwars %&gt;% \n  filter(homeworld %in% c(\"Tatooine\", \"Naboo\")) %&gt;% \n  filter(species != \"droid\") %&gt;% \n  ggplot(.,aes(x = homeworld, fill = sex))+\n  geom_bar(position = \"fill\")\n\n# ejercicio e3\nstarwars %&gt;% \n  filter(str_detect(films, \"A New Hope\")) %&gt;% \n  ggplot(., aes(x = homeworld)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable discreta + variable continua\n\nBoxplot (diagrama de cajas y bigotes)\nUn diagrama de cajas y bigotes, también conocido como boxplot, es una representación gráfica que proporciona una descripción visual de la distribución de un conjunto de datos. Este tipo de gráfico es particularmente útil para resumir la variabilidad y la dispersión de los datos, así como para identificar la presencia de valores atípicos.\nLa caja de un boxplot comienza en el primer cuartil Q1 (25%) y termina en el tercero Q3 (75%). Por lo tanto, la caja representa el 50% de los datos centrales, con una línea que representa la mediana. A cada lado de la caja se dibuja un segmento con los datos más lejanos sin contar los valores atípicos (outliers) del boxplot, que en caso de existir, se representarán con círculos.\n\n\n\nPartes de un boxplot de una distribución normal. Imagen tomada de Byjus.com\n\n\n\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = sex))+\n  geom_boxplot()\n\n\n\n\n\n\n\n\nOtra opción para visualizar la dispersión de los datos es utilizando gráficos de violin. Esto es particularmente útil cuando se tienen muchos datos.\n\nggplot(data = penguins, aes(x = species, y = bill_length_mm, fill = sex))+\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\ngeom_point() y geom_jitter()\nLa función geom_point() es una función versatil ya que nos permite crear gráficos de dispersión (mas adelante) o para vidualizar la dispersión real de los datos categóricos\n\nggplot(data = penguins, aes(x = species, y = bill_length_mm, color = sex))+\n  geom_point()\n\n\n\n\n\n\n\n\nEsta visualización es poco útil ya que todos los puntos se traslapan. Para poder separar cada uno de los grupos (sexo) necesitamos incluir el parámetro position = para darle espacio entre cada grupo\n\nggplot(data = penguins, aes(x = species, y = bill_length_mm, color = sex))+\n  geom_point(position = position_dodge(0.2))\n\n\n\n\n\n\n\n\nEl parámetro posiiton = se puede incluir en cualquier tipo de geoms, no solo en los puntos, y permite ajustar el traslape entre grupos. Tiene varias opciones. Entre las mas útiles que utilizaremos en este curso se encuentra:\n\nposition_dodge(): Esquiva el traslape lado a lado entre objettos\nposition_jitter(): Agrega una dispersión aleatoria en el eje x a los puntos para eviar que se traslape\nposition_jitterdodge(): Agrega de forma simultanea un jitter y dodge a los puntos\nposition_identity(): No ajusta la posición de los puntos\n\nEntonces, podemos incorporar el parámetro position_jitterdodge() para disminuir el traslape entre los puntos entre y dentor de cada grupo\n\nggplot(data = penguins, aes(x = species, y = bill_length_mm, color = sex))+\n  geom_point(position = position_jitterdodge(0.1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n¿Jitter? 🤷️\n\n\n\nEn dotplots, el jitter se refiere al desplazamiento aleatorio de puntos de datos individuales a lo largo del eje para evitar superposiciones, proporcionando una representación más clara de la distribución de datos.\nDado que el valor es aleatorio, cada que se genere la gráfica, el desplazamiento de cada puto puede variar un poco sobre el eje x, pero su valor real (eje y) no se verá afectado.\n\n\n\n\n\nVisualización de una variable continua + una continua\nEste tipo de visualizaciones nos permite ver la relación entre dos variables continuas. Hay diversos geoms que podemos implementar, pero el más común es nuevamente geom_point().\n\nggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, color = sex))+\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nVisualización de resumenes estadisticos: geom_errorbar()\nMuchas veces queremos mostrar de forma clara y sencilla como se comportan nuestro datos, por lo que podemos mostrar solamente algunos estadisticos básicos, como el promedio y el grado de dispersión de los datos usando ya sea la desviación estandar o el error estandar. Esto lo podemos lograr utilizando funciones como geom_point() en conjunto con barras de dispersión con la función geom_errorbar().\nal igual que otros geoms, geom_errorbar() requiere que indiquemos su posición en el eje x, pero también requiere que indiquemos sus limites superior e inferior sobre el eje y con los parámetros ymax = y ymin =, respectivamente.\nPara esto, primero necesitamos calcular estos estadísticos antes de gráficarlos.\nPor ejemplo, calculemos el promedio y la desviación estándar de la longitud del pico para cada especie de pingüinos, por sexo.\n\npenguins_estat &lt;- penguins %&gt;% \n  group_by(species) %&gt;% \n  summarise(promedio = mean(bill_length_mm, na.rm = TRUE),\n            desvest = sd(bill_length_mm, na.rm = TRUE)) %&gt;% \n  ungroup()\n\nggplot(penguins_estat, aes(x = species, y = promedio))+\n  geom_point() +\n  geom_errorbar(aes(ymin = promedio - desvest, ymax = promedio + desvest))\n\n\n\n\n\n\n\n\nEn este caso utilizamos un punto para indicar el promedio, pero también podemos utilizar un gráfico de barras.\n\nggplot(penguins_estat, aes(x = species, y = promedio))+\n  geom_col() +\n  geom_errorbar(aes(ymin = promedio - desvest, \n                    ymax = promedio + desvest), \n                width = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesafio pingüinos\n\n\n\nRealiza una gráfica de barras donde se muestre el promedio \\(\\pm\\) desviación estandar de la longitud del pico de cada especie y sexo. Distingue los sexos por el color de relleno de las barras.\nRecuerda que puedes incluir el parámetros position = position_dodge() para separar las barras entre grupos\n\n\nver codigo\npenguins %&gt;% \n  group_by(species, sex) %&gt;% \n  summarise(promedio = mean(bill_length_mm, na.rm = TRUE),\n            desvest = sd(bill_length_mm, na.rm= TRUE), \n            .groups = \"drop\") %&gt;% \n  ggplot(., aes(x = species, y = promedio, fill = sex)) +\n  geom_col(position = position_dodge(), color = \"black\")+\n  geom_errorbar(aes(ymin = promedio - desvest, ymax = promedio + desvest),\n                width = 0.5, position = position_dodge(0.9))\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nLos amigos no permiten que sus amigos hagan gráficas de barras\nMuchas veces al presentar los datos de una investigación nos vamos directamente a mostrar el promedio \\(\\pm\\) desviación estandar o algún otro valor de dispersión pero puede que esto no muestre toda la verdad sobre la distribución de los datos. Como demostración haz el siguiente ejercicio:\n\nAbre la tabla datos_demo.csv que se encuentra en la carpeta de datos\nSin hacer ningún tipo de observación previa, haz una gráfica donde se muestre el promedio \\(\\pm\\) desviación estándar. Para ello, utiliza las funciones group_by() y summarise() que hemos visto anteriormente.\nAhora, utilizando el set de datos completo, gráfica la dispersión de los datos con geom_point() y añade un boxplot con geom_boxplot().\n\n\n\nver codigo\ndemo &lt;- read_csv(\"data/datos_demo.csv\")\n\n\n# promedios\ndemo %&gt;% \n  group_by(grupo) %&gt;% \n  summarise(promedio = mean(valor),\n            desvest = sd(valor)) %&gt;% \n  ggplot(.,aes(x = grupo, y = promedio, fill = grupo))+\n  geom_col()+\n  geom_errorbar(aes(ymin = promedio - desvest, ymax = promedio + desvest),\n                width = 0.3)\n\n# datos completos\ndemo %&gt;% \n  ggplot(.,aes(x = grupo, y = valor, color = grupo))+\n  geom_boxplot()+\n  geom_point(position = position_jitterdodge(0.2))\n\n\n¿Que conclusiones puedes sacar de ambas gráficas?\nEl uso de histogramas, densidades o gráficas de dispersión nos permite hacer un análisis exploratorio de los datos, permitiendo tomar mejores decisiones sobre el tipo de estadísticos o procesamiento que se van a utilizar.\nPuedes encontrar una discusión mas profunda sobra la importancia de la correcta presentación e interpretación de datos en publicaciones científicas aquí."
  },
  {
    "objectID": "8_ggplotNoCode.html",
    "href": "8_ggplotNoCode.html",
    "title": "ggplot2 sin codigo",
    "section": "",
    "text": "Como hemos visto hasta este punto, ggplot2 es una poderosa herramienta para realizar gráficos de alta calidad y un alto grado de personalización. Esto último conlleva al problema de que puede resultar complicado escribir la grpamatica necesario para gráficar lo que deseamos, o incluso que lleve tiempo realizar un gráfico relativametne sencillo.\nAfortunadamente, existen algunas alternativas dentro de R que nos ´permiten generar gráficos con ggplot2 pero usando una interfaz gráfica."
  },
  {
    "objectID": "8_ggplotNoCode.html#instalación.",
    "href": "8_ggplotNoCode.html#instalación.",
    "title": "ggplot2 sin codigo",
    "section": "Instalación.",
    "text": "Instalación.\nEl addin de esquisse se instala como cualquier otro paquete usando la función install.package()\n\ninstall.packages(\"esquisse\")"
  },
  {
    "objectID": "8_ggplotNoCode.html#esquisse-addin",
    "href": "8_ggplotNoCode.html#esquisse-addin",
    "title": "ggplot2 sin codigo",
    "section": "esquisse addin",
    "text": "esquisse addin\nUna vez instalado, hay dos formas para correr esquisse:\n\nDesde la línea de comando usando la función esquisser()\n\n\nlibrary(esquisse)\nesquisser()\n\nlibrary(ggplot2)\n\n\nUtilizando las opciones de addins:\n\n\n\n\nAlt Text\n\n\n\n\n\n\n\n\nNote\n\n\n\nSi no tienes nada en tu ambiente, esquisser() abrirá un panel donde puedes seleccionar la base de datos a partir de un archivo, de un enlace, una hoja de google sheet o incluso copiar y pegar desde otro archivo.\nSi ya tienes datos en tu ambiente, puedes abrirlos directamente con esquisser de la siguiente forma:\n\nesquisser(penguins)\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSi tienes problemas con la ventana de esquisser en el panel, puedes abrirla en una ventana del explorador usando el parámetro viewer = \"browser\"\n\nesquisser(viewer = \"browser\")\n\n\n\nUna vez seleccionados los datos, podemos proceder a arrastrar cada uno de las variables a los distintos aes. Dependiendo del tipo de datos, esquisser nos sugerirá una geometría (geom) adecuada para los datos o podemos seleccionar manualmente el tipo de gráfico.\n\n\n\nAlt Text\n\n\n\n\n\n\n\n\nDesafio: Etch a sketch\n\n\n\n\nRecrea el siguiente gráfico usando esquisser"
  },
  {
    "objectID": "8_ggplotNoCode.html#instalación-de-ggplotgui-desde-el-ambiente-de-r",
    "href": "8_ggplotNoCode.html#instalación-de-ggplotgui-desde-el-ambiente-de-r",
    "title": "ggplot2 sin codigo",
    "section": "Instalación de ggplotgui desde el ambiente de R",
    "text": "Instalación de ggplotgui desde el ambiente de R\n\n\n\n\n\n\nNote\n\n\n\nEs necesario tener instalada la libreria “devtools”\n\n\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"gertstulp/ggplotgui\")\nlibrary(\"ggplotgui\")\n\nUna vez instalado, corremos la función:\n\nggplot_shiny()\nggplot_shiny(pokemon)\n\nEn línea, se puede usar la herramienta en el siguiente enlace:\nhttps://shiny.gmw.rug.nl/ggplotgui/"
  },
  {
    "objectID": "8_ggplotNoCode.html#instalación",
    "href": "8_ggplotNoCode.html#instalación",
    "title": "ggplot2 sin codigo",
    "section": "Instalación",
    "text": "Instalación\nEste paquete se encuentra disponible en su versión mas estable en CRAN:\n\ninstall.packages(\"ggThemeAssist\")\n\nUna vez instalado, aparecera dentro de la lista de addins de RStudio"
  },
  {
    "objectID": "8_ggplotNoCode.html#uso",
    "href": "8_ggplotNoCode.html#uso",
    "title": "ggplot2 sin codigo",
    "section": "Uso",
    "text": "Uso\nUna vez instalado, para usarlo es necesario seleccionar un objeto ggplot que ya se haya generado y posteriormente abrir el addin desde el panel de RStudio."
  },
  {
    "objectID": "apoyo.html",
    "href": "apoyo.html",
    "title": "Recursos de apoyo",
    "section": "",
    "text": "A continuación se muestran diversos materiales disponibles en la red con los que puedes ampliar tus conocimientos en R y ciencia de datos\n\nLibros en línea\n\nR para Ciencia de Datos - Versión en español de conocido libro “R for Data Science” de Wickham y Grolemund.\nThe Big Book of R - Extensa colección de libros y materiales en línea.\nData Visualization with R - Libro para la creación de gráficos en ggplot.\nFundamentals of Data Visualization - Guía para generar visualizaciones efectivas.\nQuarto - Guia para generar reportes, páginas web y documentos PDF con Quarto\n\nA quien seguir\n\nPositPBC - Seminarios, tutoriales y comentarios sobre las últimas novedades de la comunidad de Rstudio (Posit).\nR ladies - R-Ladies es una organización mundial cuya misión es promover la diversidad de género en la comunidad R.\nCommunity of Bioinformatics Software Developers - Canal de bioinformática con númerosos tutoriales de R desde nivel principiante hasta análisis avanzados.\nAlbert Rapp - Contiene numerosos tutoriales básicos y avanzados para el análisis de datos en R\n\nCheat Sheets\n\nDplyr\nggplot2\nreadr\nstringr\ny muchos otros"
  },
  {
    "objectID": "part_1_prep.html",
    "href": "part_1_prep.html",
    "title": "Preparation",
    "section": "",
    "text": "Page without code\n\n\n\nThis page contains an example for some structured preparation information for a workshop. No code is executed here.\nHere are some preparation information for the participants."
  },
  {
    "objectID": "part_1_prep.html#software",
    "href": "part_1_prep.html#software",
    "title": "Preparation",
    "section": "Software",
    "text": "Software\nIn this workshop we will be using R. You can either\n\nhave R and Rstudio installed on your laptop\nor, use Posit cloud (formerly Rstudio Cloud).\n\nPosit cloud is free of charge for personal users, yet you need to sign up for a new user account and have internet connection.\nThe R package we are using is glmnet."
  },
  {
    "objectID": "part_1_prep.html#data",
    "href": "part_1_prep.html#data",
    "title": "Preparation",
    "section": "Data",
    "text": "Data\nThe datasets we use can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#code",
    "href": "part_1_prep.html#code",
    "title": "Preparation",
    "section": "Code",
    "text": "Code\nThe R scripts used in part 1 and part 2 can be found here (insert link)."
  },
  {
    "objectID": "part_1_prep.html#resources",
    "href": "part_1_prep.html#resources",
    "title": "Preparation",
    "section": "Resources",
    "text": "Resources\nLecture notes (insert link)\nLab notes (insert link)"
  },
  {
    "objectID": "slides/introduccion.html#bienvenidos",
    "href": "slides/introduccion.html#bienvenidos",
    "title": "Análisis de datos con Tidyverse",
    "section": "Bienvenidos",
    "text": "Bienvenidos\nExplorando el Tidyverse"
  },
  {
    "objectID": "slides/introduccion.html#qué-es-el-tidyverse",
    "href": "slides/introduccion.html#qué-es-el-tidyverse",
    "title": "Análisis de datos con Tidyverse",
    "section": "¿Qué es el Tidyverse?",
    "text": "¿Qué es el Tidyverse?\n\n\n\n\n\nUn conjunto de paquetes de R diseñados para ciencia de datos.\nTodos los paquetes comparten una filosofía, gramática y estructura.\nDiseñados para apoyar el flujo de trabajo de cualquier proyecto de análisis de datos."
  },
  {
    "objectID": "slides/introduccion.html#filosofía-tidyverse",
    "href": "slides/introduccion.html#filosofía-tidyverse",
    "title": "Análisis de datos con Tidyverse",
    "section": "Filosofía Tidyverse",
    "text": "Filosofía Tidyverse\n\n“La idea del tidyverse es que los datos limpios y las funciones legibles hacen el análisis más fluido.”\n\n\nSintaxis coherente\nFunciones legibles y expresivas\nPromueve el flujo de trabajo reproducible"
  },
  {
    "objectID": "slides/introduccion.html#visualización-de-datos-con-ggplot2",
    "href": "slides/introduccion.html#visualización-de-datos-con-ggplot2",
    "title": "Análisis de datos con Tidyverse",
    "section": "Visualización de Datos con ggplot2",
    "text": "Visualización de Datos con ggplot2\n\nlibrary(ggplot2)\n\nggplot(mpg, aes(displ, hwy, color = class)) +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nAnálisis de datos con Tidyverse"
  },
  {
    "objectID": "slides/introduccion.html#análisis-de-datos-con-tidyverse",
    "href": "slides/introduccion.html#análisis-de-datos-con-tidyverse",
    "title": "Análisis de datos con Tidyverse",
    "section": "Análisis de datos con Tidyverse",
    "text": "Análisis de datos con Tidyverse\nExplorando el Tidyverse"
  },
  {
    "objectID": "slides/presentation.markdown.html#introduction-to-r-and-rstudio",
    "href": "slides/presentation.markdown.html#introduction-to-r-and-rstudio",
    "title": "Introduction to R, RStudio, and Tidyverse",
    "section": "Introduction to R and RStudio",
    "text": "Introduction to R and RStudio\n\nR: A programming language for statistical computing and graphics.\n\nOpen-source, widely used in data analysis and research.\n\nRStudio: An IDE for R (now part of Posit).\n\nFeatures: Code editor, package management, visualization tools, and Quarto integration.\n\nWhy use them?\n\nFree, extensible, and supported by a large community.\nIdeal for reproducible research and data science."
  },
  {
    "objectID": "slides/presentation.markdown.html#introduction-to-tidyverse",
    "href": "slides/presentation.markdown.html#introduction-to-tidyverse",
    "title": "Introduction to R, RStudio, and Tidyverse",
    "section": "Introduction to Tidyverse",
    "text": "Introduction to Tidyverse\n\nTidyverse: A collection of R packages for data manipulation, visualization, and analysis.\nCore packages include:\n\nggplot2: Advanced data visualization.\ndplyr: Data manipulation (filtering, grouping, etc.).\ntidyr: Data tidying (reshaping datasets).\nreadr: Fast data import.\npurrr: Functional programming tools.\ntibble: Enhanced data frames.\n\nFocuses on “tidy” data principles."
  },
  {
    "objectID": "slides/presentation.markdown.html#tidyverse-vs.-r-base",
    "href": "slides/presentation.markdown.html#tidyverse-vs.-r-base",
    "title": "Introduction to R, RStudio, and Tidyverse",
    "section": "Tidyverse vs. R Base",
    "text": "Tidyverse vs. R Base\n\nR Base:\n\nUses built-in functions (e.g., subset(), merge()).\nSyntax can be less consistent and harder to read.\nSuited for basic statistical tasks.\n\nTidyverse:\n\nUnified syntax with the pipe operator (%&gt;% or |&gt;) for chaining operations.\nDesigned for tidy data (each column a variable, each row an observation).\nMore intuitive for complex data workflows."
  },
  {
    "objectID": "slides/presentation.markdown.html#advantages-of-using-tidyverse",
    "href": "slides/presentation.markdown.html#advantages-of-using-tidyverse",
    "title": "Introduction to R, RStudio, and Tidyverse",
    "section": "Advantages of Using Tidyverse",
    "text": "Advantages of Using Tidyverse\n\nReadability: Pipe-based syntax makes code clear and sequential.\nConsistency: Shared design philosophy across packages.\nEfficiency: Simplifies common tasks like filtering, summarizing, and joining.\nVisualization: ggplot2 offers publication-quality graphics.\nCommunity Support: Extensive tutorials, forums, and documentation."
  },
  {
    "objectID": "slides/presentation.markdown.html#who-develops-and-maintains-tidyverse",
    "href": "slides/presentation.markdown.html#who-develops-and-maintains-tidyverse",
    "title": "Introduction to R, RStudio, and Tidyverse",
    "section": "Who Develops and Maintains Tidyverse?",
    "text": "Who Develops and Maintains Tidyverse?\n\nDeveloped by: Posit (formerly RStudio), with key contributions from Hadley Wickham.\nMaintained by:\n\nPosit team for core packages.\nOpen-source contributors via GitHub.\n\nUpdates: Regular releases and new packages to address modern data needs.\nCommunity: Engaged through Posit Community, R conferences, and online platforms."
  },
  {
    "objectID": "slides/presentation.markdown.html#thank-you",
    "href": "slides/presentation.markdown.html#thank-you",
    "title": "Introduction to R, RStudio, and Tidyverse",
    "section": "Thank You!",
    "text": "Thank You!\n\nLearn more at tidyverse.org.\nDownload R and RStudio at posit.co.\nJoin the conversation at community.rstudio.com.\n\n\n\n\n\nIntroduction to R and Tidyverse"
  },
  {
    "objectID": "slides/introduccion.html#sobre-mi",
    "href": "slides/introduccion.html#sobre-mi",
    "title": "Análisis de datos con Tidyverse",
    "section": "Sobre mi",
    "text": "Sobre mi\n\n\n\n\n\nBiólogo Marino (2006; UABCS)\n\nMaestría en Uso Manejo y Preservación de los Recursos Naturales (2009; CIBNOR)\n\nDoctor en Ciencias Naturales (Uni Bremen/AWI)\n\nPosdoct Dept Acuicultura (2019 - 2021)\n\nPosdoct Acuicultura (2022 - 2025; CIBNOR)"
  },
  {
    "objectID": "slides/introduccion.html#qué-es-el-tidyverse-1",
    "href": "slides/introduccion.html#qué-es-el-tidyverse-1",
    "title": "Análisis de datos con Tidyverse",
    "section": "¿Qué es el Tidyverse?",
    "text": "¿Qué es el Tidyverse?\n\n\nUn conjunto de paquetes de R diseñados para ciencia de datos.\nTodos los paquetes comparten una filosofía, gramática y estructura.\nDiseñados para apoyar el flujo de trabajo de cualquier proyecto de análisis de datos."
  },
  {
    "objectID": "slides/introduccion.html#que-ventajas-tiene-usar-tidyverse",
    "href": "slides/introduccion.html#que-ventajas-tiene-usar-tidyverse",
    "title": "Análisis de datos con Tidyverse",
    "section": "¿Que ventajas tiene usar Tidyverse?",
    "text": "¿Que ventajas tiene usar Tidyverse?\n\n\n\nEficiencia y consistencia\nSimplificación de código\nIntuitivo para el humano\n\n\n\n\n\n\n  nombre edad nota    ciudad\n1    Ana   20   85    Madrid\n2   Juan   22   90 Barcelona\n3  María   19   78  Valencia\n4  Pedro   21   92   Sevilla\n5  Lucía   23   88    Bilbao\n\n\n\n\n\nbase &lt;- df[df$nota &gt; 85, c(\"nombre\", \"nota\")]\nbase &lt;- base[order(base$nota, decreasing = TRUE), ]\n\n\n\n\n\ntidy &lt;- df %&gt;%\n  select(nombre, nota) %&gt;%\n  filter(nota &gt; 85) %&gt;%\n  arrange(desc(nota))"
  },
  {
    "objectID": "slides/introduccion.html#realmente-necesito-aprender-a-usar-tidyverse",
    "href": "slides/introduccion.html#realmente-necesito-aprender-a-usar-tidyverse",
    "title": "Análisis de datos con Tidyverse",
    "section": "¿Realmente necesito aprender a usar Tidyverse?",
    "text": "¿Realmente necesito aprender a usar Tidyverse?"
  },
  {
    "objectID": "slides/introduccion.html#quien-desarrolla-tidyverse",
    "href": "slides/introduccion.html#quien-desarrolla-tidyverse",
    "title": "Análisis de datos con Tidyverse",
    "section": "¿Quien desarrolla Tidyverse?",
    "text": "¿Quien desarrolla Tidyverse?"
  },
  {
    "objectID": "slides/introduccion.html#que-es-el-tidyverse",
    "href": "slides/introduccion.html#que-es-el-tidyverse",
    "title": "Análisis de datos con Tidyverse",
    "section": "¿Que es el Tidyverse?",
    "text": "¿Que es el Tidyverse?\n\n\n\n\n\nUn conjunto de paquetes de R diseñados para ciencia de datos.\nTodos los paquetes comparten una filosofía, gramática y estructura.\nDiseñados para apoyar el flujo de trabajo de cualquier proyecto de análisis de datos."
  },
  {
    "objectID": "slides/introduccion.html#rstudio",
    "href": "slides/introduccion.html#rstudio",
    "title": "Análisis de datos con Tidyverse",
    "section": "Rstudio",
    "text": "Rstudio\nIntegrated Development Environemnt (IDE)\n\n\n\n\n\n\n\n\n\nEscribir código\nNavegar archivos\nInspeccionar variables\nVisualizar gráficos\nControl de versiones\n\n\n⚠️ Es necesario tener ambos (R y Rstudio) instalados"
  }
]