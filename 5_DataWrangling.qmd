---
title: "Manipulaci√≥n de datos. Parte I"
author: "Miguel A. Tripp Valdez"
editor_options: 
  chunk_output_type: console
---

# El formato Tidy

![](img/tidydata-messy.jpg){fig-align="center" width="582"}

Tidy Data es un concepto fundamental dentro del ecosistema Tidyverse en R que se centra en la organizaci√≥n y manipulaci√≥n eficiente de datos para an√°lisis y visualizaci√≥n.

En el contexto de Tidy Data, se busca estructurar los conjuntos de datos de manera que cada observaci√≥n sea una fila, cada variable sea una columna y cada valor tenga su propia celda. Esto permite que los datos est√©n organizados en un formato uniforme y consistente, lo que facilita su manipulaci√≥n y an√°lisis.

En resumen, los principios de tidy data son los siguientes:

1.  Cada variable debe tener su **propia columna**
2.  Cada observaci√≥n debe tener su **propia fila**
3.  Cada valor debe tener su **propia celda**

![](img/tidydata.png){fig-align="center"}

# Manipulaci√≥n de datos con Dplyr

El paquete Dplyr proporciona un conjunto coherente de funciones que permiten realizar operaciones comunes de manipulaci√≥n de datos de manera **intuitiva** y eficaz. Estas funciones est√°n optimizadas para trabajar con datos grandes y complejos, y permiten realizar tareas como filtrar `filter()` filas, seleccionar `select()` columnas, transformar valores `mutate()`, crear res√∫menes `summarise()` y agrupar datos `group_by()` entre muchas otras funciones. Las cinco funciones mas comunes que usaremos son:

-   `select()`: selecciona columnas de una tabla.
-   `filter()`: selecciona (o filtra) filas de una tabla a partir de una o m√°s condiciones l√≥gicas.
-   `group_by()`: agrupa una tabla en base al valor de una o m√°s columnas.
-   `mutate()`: agrega nuevas columnas a una tabla.
-   `summarise()`: calcula estad√≠sticas para cada grupo de una tabla.

::: callout-note
# Sobre la base de datos

::: column-margin
![](img/pokemon_log.png){width="221"}
:::

Para esta secci√≥n utilizaremos una versi√≥n modificada de la base POKEMON de [Kaggle](https://www.kaggle.com/datasets/rounakbanik/pokemon) y contiene la siguiente informaci√≥n:

-   **pokedex number**: N√∫mero de identificador de cada pok√©mon
-   **Name**: Nombre de cada Pok√©mon
-   **Type**: Tipo de Pok√©mon, esto determina su resistencia o debilidad a los ataques
-   **HP**: Hit Points, define que tanto da√±o puede tolerar un Pok√©mon antes de desvanecerse
-   **Attack**: Ataque
-   **Defense**: Defensa
-   **SP Atk**: Ataque especial
-   **SP Def**: Defensa especial
-   **Speed**: Velocidad. Determina cual Pok√©mon ataca primero en cada ronda
-   **Weight**: peso en kg Generatio: A cual generaci√≥n pertenece
-   **is legendary**: Si es legendario o no
:::

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(here)
library(janitor)
```

```{r}
pokemon <- read_csv("data/pokemon.csv")
pokemon
```

Vamos a correjir los nombres de las columnas con **janitor**

```{r}
pokemon <- clean_names(pokemon)
pokemon
```

## Seleccionar columnas con `select()`

Permite **seleccionar** una o varias columnas de un tibble o data.frame.

Por ejemplo, si queremos seleccionar solamente las columnas Name, y Attack

```{r}
select(pokemon, name, attack)
```

Recuerda que si queremos generar un nuevo objeto con ese subset de datos tenemos que asignarlo a otro objeto.

```{r}
pokemon_sub <- select(pokemon, name, attack)
pokemon_sub
```

Con `select()` tambien podemos seleccionar todo **menos** una columna especifica con el operador `-`

```{r}
pokemon_sub <- select(pokemon, -attack)
pokemon_sub
```

o podemos seleccionar un intervalo de columnas

```{r}
pokemon_sub <- select(pokemon, name, attack:hp)
pokemon_sub
```

o lo inverso para descartar un intervalo de columnas

```{r}
pokemon_sub <- select(pokemon, -(attack:hp))
pokemon_sub
```

La funci√≥n `everything()` se puede seleccionar todo, y con esto es factible combiar el orden de las columnas. Por ejemplo, si queremos que la primera columna sea `type` ejecutamos:

```{r}
select(pokemon, type1, everything())
```

### Seleccionar variables con un patr√≥n

Estas funcionen ayudad a seleccionar variables seg√∫n un patr√≥n determinado

-   `starts_with()`: Inicia con un prefijo exacto
-   `ends_with()`: Finaliza con un sufijo exacto
-   `contains()`: Contiene una cadena literal

Por ejemplo, podemos seleccionar las columnas de Sp attack y Sp deffense utilizando el prefijo sp

```{r starts_with}
select(pokemon, name, starts_with("sp_"))
```

O podemos seleccionar las variables relacionadas con ataque (*attack*)

```{r contains}
select(pokemon, name, contains("attack"))
```

## Filtrar variables con `filter()`

![](img/Horst_functions/filter.png)

La funci√≥n `filter()` nos permite filtrar los elementos de una variable (columna) que cumplan con una condici√≥n especifica.

Por ejemplo, para filtrar pokemon que tengan un nivel de ataque (*Attack*) superior a 100 usariamos

```{r filter_attack}
filter(pokemon, attack > 100)
```

Para establecer varios condiciones, simplemente las podemos separar por una `,`. Por ejemplo, si queremos filtrar a los pokemon que tengan un nivel de ataque mayor a 100 y que sea de tipo fuego (*fire*)

```{r filter_twocondition}
filter(pokemon, attack > 100, type1 == "fire")
```

::: column-margin
::: callout-tip
Si tienes muchas condiciones, puedes escribir cada condici√≥n en una l√≠nea diferente.

```{r filter_manyconditions}
#| eval: false
filter(pokemon, attack > 100,
       type1 == "fire",
       generation == 1, 
       speed > 50)
```
:::
:::

Si queremos filtrar distintas condiciones de una misma variable (columna) podemos usar el operador `%in%`.

Por ejemplo, para filtar los pokemon que sean de tipo fuego **y** agua

```{r}
filter(pokemon, type1 %in% c("fire", "water"))
```

::: callout-note
# Nota

Si tienes muchas condiciones o si tienes las mismas condiciones que quieres filtrar en distintos sets de datos, puedes hacer un vector y despues incorporarlo en la funcion filter. Por ejemplo

```{r}
tipos <- c("fire", "normal", "water")

filter(pokemon, type1 %in% tipos)


```
:::

### Filtrar variables en un intervalo con `between()`

Es posible filtrar un intervalo de valores utilizando la funci√≥n `between()`. Esta funci√≥n requiere como argumentos el nombre de la variable que queremos filtrar, el l√≠mite inferior y el l√≠mite superior.

Por ejemplo, si queremos filtrar los pokemon que tengan un nivel de ataque (*attack*) mayor a 100 pero menor a 150

```{r filter_between}
filter(pokemon, between(attack, 100, 150))
```

Podemos usar la operaci√≥n opuesta utilizando el operado `!`

```{r filter_beweenopos}
filter(pokemon, !between(attack, 100, 150))
```

::: {.callout-caution icon="false"}
# **Ejercicio: ¬ø¬°QUIEN ES ESE POKEMON!?** üì£

::: column-margin
![](img/jigglypuff.png){fig-align="center" width="500"}
:::

Nuestro pok√©mon tiene un valor de HP entre 100 y 200; valor de velocidad menor a 50; es del tipo1 Normal; tiene un valor de defensa menor a 40 y pertenece a la primera generaci√≥n

```{r}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: false

filter(pokemon, between(hp, 100, 200),
       speed < 50,
       type1 == "normal",
       defense < 40,
       generation == 1)
```
:::

### Filtrar variables con un patr√≥n; `str_detec()`

Tambien es posible filtrar una variable a partir de un caracter en especifico usando la funci√≥n `str_detect()`.

```{r string_detect}
filter(pokemon, str_detect(name, "eon"))

```

Si buscamos multiples patrones dentro de nuestra variable con caracteres, podemos separarlas dentro de las comillas usando el s√≠mbolo "\|". Por ejemplo, si queremos buscar los Pokemon cuyo nombre termine con "*saur*" o que empieza con "*Char*":

```{r}
filter(pokemon, str_detect(name, "saur|Char"))
```

::: {.callout-caution icon="false"}
# Ejercicio: Una galax√≠a muy lejana...

Abre la tabla `starwars` que se encuentra en el directorio de *databases* y genera los siguientes objetos:

1.  Una tabla que incluya solamente el nombre del personaje y todas las variables relacionadas con colores.
2.  Una tabla que incluya solamente los personajes femeninos del planeta Naboo.
3.  Una tabla con los personajes que hayan aparecido en *Attack of the Clones*.
:::

## Transformar o crear columnas con `mutate()`

![](img/Horst_functions/mutate.png){fig-align="center" width="500"}

La funci√≥n `mutate()` es una funci√≥n versatil en el sentido que nos permite crear nuevas variables que contengan alguna operaci√≥n a partir de las que ya tenemos, a√±adir una nueva variable o transformar una variable ya existente

Por ejemplo, podemos generar una nueva columna llamada ‚Äúat_df_ratio‚Äù con la propoci√≥n de los valores de Ataque sobre Defensa

```{r mutate_ratio}
pokemon_mutate <- mutate(pokemon, at_df_ratio = attack/defense )

head(pokemon_mutate$at_df_ratio)
```

De igual manera, se pueden generar diversas nuevas columnas en una misma funci√≥n separadas por comas.

```{r mutate_ratio_i}
pokemon_mutate <- mutate(pokemon, 
                         at_df_ratio = attack/defense,
                         at_df_per = at_df_ratio * 100,
                         nueva_col = "nueva columna")

pokemon_mutate
```

Con `mutate()`, tambi√©n es posible cambiar el tipo de dato de cada columna. Por ejemplo, cambiar la columna ‚ÄúType1‚Äù de car√°cter a factor:

```{r mutate_ratio_ii}
pokemon_mutate <- mutate(pokemon, type1 = factor(type1))
pokemon_mutate
```

# Renombrar variables con `rename()`

La funci√≥n `rename()` cambia el nombre de variables individuales usando una sintaxis `nuevo_nombre = viejo_nombre`.

```{r}
pokemon %>% 
  rename(nombre = name,
         ataque = attack)
```

# Pipes *%\>%* y *\|\>*

::: column-margin
![](img/pipe.png){fig-align="center"}
:::

El operador %\>% nos permite aplicar una serie de funciones secuenciales a un objeto sin tener que ir creando variables para uso temporal o sin tener que anidar funciones.

Dplyr importa este operador de otro paquete (magrittr). De manera general, el operador permite unir el resultado de una funci√≥n a la entrada de otra funci√≥n.

Por ejemplo, si yo quiere filtrar los pokemon con valor de ataque mayor a 100, seleccionar las columnas Name y Attack y posteriormente mostrar solo las primeras seis filas (head) tendria que correr la siguiente linea:

```{r pipe_exam}
head(select(filter(pokemon, attack < 100), name, attack))
```

Usando pipes, podemos reescribir esta secuencia de funciones asi:

```{r pipe_examii}

pokemon |> 
  filter(attack < 100) %>%  
  select(name, attack) %>%  
  head()
  
```

Los resultados de esta cadena, pueden asignarse a una nueva variable

```{r}
pokemon_pipe <- pokemon %>%  
  filter(attack < 100) %>%  
  select(name, attack) %>%  
  head()
```

::: {.callout-note icon="true"}
# Catsup, Ketchup; %\>% , \|\>

![](img/catsup_pipes.png){fig-align="center" width="361"}

Desde su versi√≥n 4.1.0, R incluye un pipe nativo `|>`. El comportamiento de ambos pipes es en gran medida el mismo, permitiendo expresar una secuencia de operaciones a un objeto, existen algunas diferencias que se discuten en [este articulo](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/).

Para fines de este curso, nos enfocaremos a usar el pipe de **magritrr**.
:::

::: column-margin
::: callout-tip
Para escribir r√°pidamente el operador `%>%` teclea Ctrl+shift+M
:::
:::

::: {.callout-caution icon="false"}
# Ejercicio: Ping√ºinos

::: column-margin
![](img/Palmer.png){fig-align="center" width="316"}
:::

Abre la tabla `palmer_penguis.csv` que se encuentra en el directorio de *databases* y utilizando pipes genera los siguientes objetos:

1.  Una tabla con los ping√ºinos de la especie Adelie y que incluya una columna con la proporci√≥n (ratio) entre la longitud y profundidad del pico.
2.  Una tabla con solamente los individuos hembras de culquier especie y que solamente contenta las columnas de *especie*, *isla* y peso corporal **en Kg**.
3.  Una tabla que contenga a los individuos machos de la especie Gentoo con un peso corporal mayor a 4 Kg. Convierte la columna isla a factor.

```{r palmer_exc}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: false


penguins <- read_csv("data/palmer_penguins.csv")

# ejercicio 1
penguins_e1 <- penguins %>% 
  filter(species == "Adelie") %>% 
  mutate(bill_ratio = bill_length_mm / bill_depth_mm)

# ejercicio 2
penguins_e2 <- penguins %>% 
  filter(sex == "female") %>% 
  mutate(body_mass_kg = body_mass_g / 1000) %>% 
  select(species, island, body_mass_kg)

# ejercicio 3
penguins_e3 <- penguins %>% 
  mutate(island = factor(island),
         body_mass_kg = body_mass_g / 1000) %>% 
  filter(species == "Gentoo",
         sex == "male",
         body_mass_kg > 4)


```
:::

# Resumen de los datos; `summarise()` y `group_by()`.

Un elemento importante en el an√°lisis exploratorio de datos es poder agrupar y resumir para obtener informaci√≥n relevante del set de datos. El promedio y la desviaci√≥n est√°ndar son ejemplos de esto. Adem√°s, agrupar los datos de acuerdo a alguna caracteristica permite obtener resultados mas informativos.

Para hacer un resumen (*summary*) de una determinada variable en los datos podemos utilizar la funci√≥n `summarise()` que a su vez nos permite aplicar una funci√≥n (mean, sd, min, max) a una variable.

Por ejemplo, para obtener el peso promedio en g de los ping√ºinos, podemos aplicar la funci√≥n de la siguiente forma:

```{r}
penguins <- read_csv("data/palmer_penguins.csv")

penguins %>% 
  summarise(promedio = mean(body_mass_g, na.rm = TRUE))
```

o aplicar el promedio y desviaci√≥n estandar

```{r}
penguins %>% 
  summarise(promedio = mean(body_mass_g, na.rm = TRUE),
            desviacion = sd(body_mass_g, na.rm = TRUE))
```

## Operaciones agrupadas

Considerando la base de datos, seria mas informativo obtener el promedio por especie o por isla. La funci√≥n `group_by()` permite agrupar los datos de acuerdo a alguna variable (factor).

Por ejemplo, para obtener el peso promedio por especie:

```{r}
penguins %>% 
  group_by(species) %>% 
  summarise(promedio_peso = mean(body_mass_g, na.rm = TRUE))
```

Podemos agrupar utilizando mas variables separadas por una coma:

```{r}
penguins %>% 
  group_by(island, species, sex) %>% 
  summarise(promedio_peso = mean(body_mass_g, na.rm = TRUE),
            desviacion = sd(body_mass_g, na.rm = TRUE),
            N = n())
```

Existen otras funciones √∫tiles por las que nos podr√≠a interesar agrupar

-   `count()`
-   `mean()`
-   `median()`
-   `min()`
-   `max()`
-   `quantile(x, 0.25)`
-   `IQR()`

El uso de la funci√≥n `group_by()` tambien nos permite transformar una variable e incluirla en una columna en conjunto con la funci√≥n `mutate()`

```{r}
penguins %>% 
  group_by(species, island,sex) %>% 
  mutate(promedio_peso_grupo = mean(body_mass_g, na.rm = TRUE)) %>% 
  select(promedio_peso_grupo, everything())
```

## Resumir todas las variables con `summarise_all()`

La funci√≥n `summarise_all()` requiere una funci√≥n como argumento, la cual aplica a todas las columnas de la tabla. En este ejemplo se agrego el argumento na.rm = TRUE el cual ignora los NAs

```{r}
penguins %>% 
  group_by(species, island, sex) %>% 
  summarise_all(mean, na.rm = TRUE) 
```

# `count()`

La funci√≥n `count()` nos permite saber cuantas observaciones hay en una variable especifica. Al agregar el argumento sort = TRUEdevuelve una tabla descendiente con el n√∫mero de observaciones.

Regresemos a la base de datos de star wars y evaluemos cuantos personajes hay de cada planeta.

```{r}
starwars <- read_csv("data/starwars.csv")
```

```{r}
starwars %>% 
  count(homeworld, sort = TRUE)
```

Tambien es posible hacer contenos anidados incluyendo mas variables separadas por comas:

```{r}
starwars %>% 
  count(species, homeworld, sort = TRUE)
```

::: column-margin
::: callout-tip
Por default, la funci√≥n `count()` nombra *n* al n√∫mero de items de cada grupo. Eso se puede modificar agregando el par√°metro `name`.

```{r}
#| eval: false
starwars %>% 
  count(species, 
        sort = TRUE, 
        name = "otros")
```
:::
:::

```{r}
starwars  %>% 
  mutate(sp = fct_lump_min(species, 2)) %>% 
  count(sp, sort = TRUE)
```

------------------------------------------------------------------------

::: {.callout-caution icon="false"}
# Ejercicio: TIburon a la vista!!

::: column-margin
![](img/sharky.jpeg){fig-align="center" width="316"}
:::

Abre la tabla `attacks.csv` quee se encunetra en el directorio *databases*. Explora los datos que contiene y realiza lo siguiente:

1.  Limpia el nombre de las columnas
2.  Filtra los registros que se tengan a partir del siglo XIX

Con esta nueva tabla y usando las herramientas vista al momento, contesta lo siguiente:

-   ¬øQue pa√≠s tiene el mayor n√∫mero de registros de ataque?
-   ¬øQue actividad tiene el mayor n√∫mero de registros?
-   ¬øQue actividad tiene el mayor n√∫mero de registros con resultado fatal?
-   ¬øQue pa√≠s tiene el mayor n√∫mero de registros de tiburon blanco?

> Nota: observa que hay registros como "white shark" y otros como "White shark"

```{r}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: false


attacks <- read_csv("data/attacks.csv", skip = 3)

attacks_tidy <- attacks %>% 
  clean_names() %>% 
  filter(year > 1800) 


# pregunta e1
attacks_tidy %>% 
  count(country, sort = TRUE, name = "pais")

# pregunta e2
attacks_tidy %>% 
  count(activity, sort = TRUE)


  # pregunta e3
  attacks_tidy %>% 
    filter(fatal_y_n == "Y") %>% 
    count(activity, sort = TRUE)
  
  # pregunta e4
  attacks_tidy %>% 
    filter(str_detect(species, "white shark|White shark")) %>% 
    group_by(country) %>% 
    count(country, sort = TRUE) 
  
  

```
:::

# Ejercicios de repaso

::: {.callout-caution icon="false"}
# Ejercicio 1

A continuaci√≥n se muestra una cadena de funciones con dplyr para estimar el promedio del ratio entre la masa corporal (body_mass_g) y el tama√±o de la aleta (flipper_length_mm) en las tres especies de ping√ºinos de Palmer. Acomoda la cadena en el orden correcto:

```{r}
#| include: true
#| echo: true
#| eval: false


# a 
arrange(aleta_peso_ratio_promedio)

# b 
pinguinos <- read.csv("data/palmer_penguins.csv")

# c 
group_by(species)

# d
summarise(aleta_peso_ratio_promedio = mean(aleta_peso_ratio, na.rm = TRUE))

# e
mutate(aleta_peso_ratio = body_mass_g/flipper_length_mm)

```

```{r}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: false
pinguinos <- read.csv("data/palmer_penguins.csv") %>% 
  mutate(aleta_peso_ratio = body_mass_g/flipper_length_mm) %>% 
  group_by(species) %>% 
  summarise(aleta_peso_ratio_promedio = mean(aleta_peso_ratio, na.rm = TRUE)) %>% 
  arrange(aleta_peso_ratio_promedio)
```
:::

::: {.callout-caution icon="false"}
# Ejercicio 2

Identifica y corrije los **cuatro** errores en la siguiente cadena de funciones para obtener el tama√±o promedio de la aleta en los ping√ºinos Adelie

```{r}
#| include: true
#| echo: true
#| eval: false

pinguinos <- read_csv("data/palmer_penguins.csv") %>% 
  filter(pinguinos, species = "Adelie") %>% 
  sumarise(tamano_promedio = mean(flipper_length_mm) 


```

```{r}
#| include: true
#| code-fold: true
#| code-summary: "ver codigo"
#| eval: false


pinguinos <- read_csv("data/palmer_penguins.csv") %>% 
  filter(species == "Adelie") %>% 
  summarise(tamano_promedio = mean(flipper_length_mm, na.rm = TRUE)) 
```
:::
