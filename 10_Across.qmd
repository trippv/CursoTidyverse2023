---
title: "Manipulación de datos II"
author: "Miguel A. Tripp Valdez"
---

::: callout-objetivos
## Objetivos

Al final de esta lección serás capaz de:

-   Filtrar y manipular valores de datos tabulares.
-   Realizar operaciones agrupadas.
-   Manejar pipes para unir cadena de operaciones en un data.frame.
-   Filtrar y manipular datos faltantes (`NA`).

:::


# Seleccionar columnas con `where()`

La función `where()` es auxiliar para seleccionar columnas en un tibble o data.frame. Anteriormente vimos como podíamos seleccionar columnas especificas basados en caracteres (`starts_with()`, `cointains()`, `ends_with()`). En este caso, `where()` nos permite seleccionar columnas que sean de un tipo especifico (numérico, carácter, factor, etc).




Para los siguientes ejercicios, utilizaremos la base de starwars

```{r}
#| warning: false
#| message: false

library(tidyverse)


starwars
```


Por ejemplo, si queremos seleccionar solamente las columnas que tengan valores de tipo **numerico**.

```{r}
# Esto seleccionará todas las coluomnas con variables de tipo numerico
starwars %>% 
  select(where(is.numeric))
```



:::callout-warning
Recuerda que las funciones `is.numeric()`, `is.character()` y `is.factor()` se utiliza para *"preguntar"* si un objeto es de un tipo especifico donde nos dará un resultado booleano `TRUE` o `FALSE`.

```{r}
objeto_caracter = "Esto es un caracter"
is.character(objeto_caracter)
```

:::



Ademas de que podemos incluir manualmente columnas adicionales

```{r}
starwars %>% 
  select(name, where(is.numeric))
```


y podemos seleccionar las columnas que sean de tipo caracter
```{r}
starwars %>% 
  select(name, where(is.character))
```



## Operaciones por columna con `across()`

La función `across()` permite aplicar una o mas operaciones a multiples columnas de un tibble o data.frame de manera simultanea. Es particularmente útil para evitar repetir código cuando quieres hacer lo mismo en varias columnas. 


`across()` tiene dos argumentos principales:

*   `.cols` que selecciona las columnas a las que deseen hacer una operación. Utiliza la sintaxis de Tidy select, por lo que puedes seleccionar columnas por posición, nombre, tipo, etc.
*   `.funs` es una función o lista de funciones que se desea aplicar a cada columna. 


```{r}


starwars %>% 
  summarise(across(c(height, mass, birth_year), mean, na.rm = TRUE))

# que es lo mismo que 
starwars %>% 
  drop_na() %>% 
  summarise(across(c(2:3, 7), mean))


# que tambien es lo mismo que:
starwars %>% 
  summarise(across(where(is.numeric), mean, na.rm = TRUE))

```







:::callout-tip
# Pro tip


::: column-margin
![](img/protip.png){fig-align="center" width="500"}
:::





La tercera opción es la forma mas sencilla de poder realizar una operación "_columnwise_". Sin embargo, tal como lo muestra la advertencia es una forma que no es **preferida** en las nuevas versiones de _Tidyverse_ por problemas de compatibilidad en operaciones mas complejas. 

Una opción mucho mas versátil es utilizar **funciones anónimas** lo cual permite implementar funciones mas complejas y personalizadas.

Las funciones anonimas se pueden implementar con la sintaxis

`~ mean(.x, na.rm = TRUE) ` 


Entonces, si queremos aplicar el promedio usando esta función anónima:

```{r}
starwars %>% 
  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))

```

y así podemos implementar funciones mas complejas

```{r}
starwars %>% 
  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE) / sd(.x,na.rm = TRUE)))
```

:::

# Modificación de valores en una columna con `case_when()`

`case_when()` es una función del paquete dplyr en el ecosistema tidyverse, utilizada para crear nuevas variables o modificar valores de una columna basada en condiciones lógicas, similar a un "_if-else_" estructurado.

Es útil cuando:

*   Se necesita asignar valores según múltiples condiciones.
*   Se quiere evitar el uso repetitivo de ifelse().
*   Se busca escribir código más limpio y legible.

Dado que esta función transforme los valores de una columna, se debe de utilizar anidado dentro de `mutate()`

La sintaxis básica de `case_when` es:

```{r}
#| eval: false
#| include: true

mutate(nueva_columna = case_when(
  condicion1 ~ valor1,
  condicion2 ~ valor2,
  TRUE ~ valor_por_defecto
))

```

por ejemplo, si queremos clasificar a nuestros personajes de _starwars_ por su altura usando la clasificación:

*   "Bajo" si mide menos de 150 cm
*   "Mediano" si están entre 150 y 180 cm
*   "Alto" si mide mas de 180 cm

```{r}
starwars %>% 
  select(name, height) %>% 
  mutate(altura_categoria = case_when(
    height < 150 ~ "Bajo",
    between(height, 150, 180) ~ "Mediano",
    height > 180 ~ "Alto"
  ))
```


Ahora clasificaremos las especies en tres grupos según la `specie`:

*   "Humanoide" para "Human" y "Droid".
*   "Alienígena" para otras especies.
*   "Desconocido" si la especie no está registrada.




```{r}
starwars %>% 
  select(name, species) %>% 
  mutate(specie_categorias = case_when(
    species %in% c("Human", " Droid") ~ "Humanoide",
    !is.na(species) ~ "Alienigena",
      TRUE ~ "Desconocido"
  ))
```



